swagger: 2.0

info:
  title: MDClub API 文档
  description: |
    MDClub 是一个 Material Design 风格的社区应用。

    **接口文档说明**

    * 接口描述中，若含 🔐 图标，表示该接口仅管理员有权限调用。
    * 接口返回值的字段描述中，若含 🔐 图标，表示只有管理员调用接口时，返回值中才会包含该字段。
    * 接口参数的描述中，若含 🔐 图标，表示只有管理员才能添加该参数。

  termsOfService:
  contact:
    name: zdhxiong
    url: https://github.com/zdhxiong
    email: zdhxiong@gmail.com
  license:
    name: GPL-2.0
    url: https://github.com/zdhxiong/mdclub/blob/master/LICENSE
  version: 0.0.1

basePath: /api

consumes:
  - application/json

produces:
  - application/json

paths:

  /options:

    get:
      tags:
        - Option
      summary: 获取站点全局设置参数
      responses:
        200:
          description: 全局设置参数列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Option'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    patch:
      tags:
        - Option
      summary: 🔐更新站点全局设置
      description: |
        **仅管理员可调用该接口**
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/Option'
      responses:
        200:
          description: 全局设置参数列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Option'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /tokens:

    post:
      tags:
        - UserLogin
      summary: 生成 Token
      description: |
        通过账号密码登陆，返回带 Token 的用户信息
        若登录失败，且返回信息中含参数 `captcha_token` 和 `captcha_image`，表示下次调用该接口时，需要用户输入图形验证码，并把 `captcha_token` 和 `captcha_code` 参数传递到服务端。
      parameters:
        - name: body
          in: body
          schema:
            type: object
            required:
              - name
              - password
            properties:
              name:
                type: string
                description: 用户名或邮箱
              password:
                type: string
                description: 经过 hash1 加密后的密码
              device:
                type: string
                description: 设备信息
              captcha_token:
                type: string
                description: 图形验证码token。若上一次请求返回了 captcha_token， 则必须传该参数
              captcha_code:
                type: string
                description: 图形验证码的值。若上一次请求返回了 captcha_token，则必须传该参数
      responses:
        200:
          description: 用户信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/User'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /users:

    get:
      tags:
        - UserInfo
      summary: 获取用户列表
      description: 不包含已禁用的用户
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - name: order
          type: string
          in: query
          description: 排序方式，可以为 `create_time`、`follower_count`，默认为 `create_time`。在字段前加 `-` 表示倒序排列
        - name: user_id
          type: integer
          in: query
          description: 按用户ID过滤
        - name: username
          type: string
          in: query
          description: 按用户名过滤
        - name: email
          type: string
          in: query
          description: 🔐按邮箱过滤
      responses:
        200:
          description: 用户列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Users'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    post:
      tags:
        - UserRegister
      summary: 验证邮箱并创建账号
      description: 验证邮箱并创建账号
      parameters:
        - name: body
          in: body
          schema:
            type: object
            required:
              - email
              - email_code
              - username
              - password
            properties:
              email:
                type: string
                description: 邮箱
              email_code:
                type: string
                description: 邮箱验证码
              username:
                type: string
                description: 用户名
              password:
                type: string
                description: hash1 加密后的密码
              device:
                type: string
                description: 设备信息
      responses:
        200:
          description: 用户信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/User'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    delete:
      tags:
        - UserInfo
      summary: 🔐批量禁用用户
      description: |
        **仅管理员可调用该接口**
        只要没有异常错误，无论是否有用户被禁用，该接口都会返回成功。
      parameters:
        - name: user_id
          type: string
          in: query
          description: 用“,”分隔的用户ID，最多可提供100个ID
      responses:
        200:
          description: 空数据，通过状态码区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /users/{user_id}:

    get:
      tags:
        - UserInfo
      summary: 获取指定用户信息
      description: |
        **若是管理员调用该接口、或登录用户读取自己的个人信息，将返回用户的所有信息**
        **其他情况仅返回以下字段（去掉了部分隐私信息）：**
        `user_id`
        `username`
        `avatar`
        `cover`
        `follower_count`
        `following_article_count`
        `following_question_count`
        `following_topic_count`
        `following_user_count`
        `article_count`
        `question_count`
        `answer_count`
        `headline`
        `bio`
        `blog`
        `company`
        `location`
        `create_time`
        `relationship`
      parameters:
        - name: user_id
          type: integer
          in: path
          description: 用户ID
      responses:
        200:
          description: 用户信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/User'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    patch:
      tags:
        - UserInfo
      summary: 🔐更新指定用户信息
      description: |
        **仅管理员可调用该接口**
      parameters:
        - name: user_id
          type: integer
          in: path
          description: 用户ID
        - name: body
          in: body
          type: object
          schema:
            properties:
              headline:
                type: string
                description: 一句话介绍
              bio:
                type: string
                description: 个人简介
              blog:
                type: string
                description: 个人主页
              company:
                type: string
                description: 所属企业
              location:
                type: string
                description: 所属地区
      responses:
        200:
          description: 用户信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/User'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    delete:
      tags:
        - UserInfo
      summary: 🔐禁用指定用户
      description: |
        **仅管理员可调用该接口**
      parameters:
        - name: user_id
          type: integer
          in: path
          description: 用户ID
      responses:
        200:
          description: 空数据，通过状态码区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /users/{user_id}/avatar:

    delete:
      tags:
        - UserAvatar
      summary: 🔐删除指定用户的头像，并重置为默认头像
      description: |
        **仅管理员可调用该接口**
      parameters:
        - name: user_id
          in: path
          type: integer
          description: 用户ID
      responses:
        200:
          description: 新头像地址
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/UserAvatar'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /users/{user_id}/cover:

    delete:
      tags:
        - UserCover
      summary: 🔐删除指定用户的封面，并重置为默认封面
      description: |
        **仅管理员可调用该接口**
      parameters:
        - name: user_id
          in: path
          type: integer
          description: 用户ID
      responses:
        200:
          description: 新封面地址
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/UserCover'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /users/{user_id}/followers:

    get:
      tags:
        - UserFollow
      summary: 获取指定用户的关注者
      description: 获取指定用户的关注者
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - name: user_id
          in: path
          type: integer
          description: 用户ID
      responses:
        200:
          description: 用户列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Users'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /users/{user_id}/followees:

    get:
      tags:
        - UserFollow
      summary: 获取指定用户关注的用户列表
      description: 获取指定用户关注的用户列表
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - name: user_id
          in: path
          type: integer
          description: 用户ID
      responses:
        200:
          description: 用户列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Users'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /users/{user_id}/following/questions:

    get:
      tags:
        - QuestionFollow
      summary: todo - 获取指定用户关注的问题列表
      description: 获取指定用户关注的问题列表
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - name: user_id
          in: path
          type: integer
          description: 用户ID
      responses:
        200:
          description: 问题列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Users'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /users/{user_id}/following/articles:

    get:
      tags:
        - ArticleFollow
      summary: todo - 获取指定用户关注的文章列表
      description: 获取指定用户关注的文章列表
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - name: user_id
          in: path
          type: integer
          description: 用户ID
      responses:
        200:
          description: 文章列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Articles'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /users/{user_id}/following/topics:

    get:
      tags:
        - TopicFollow
      summary: 获取指定用户关注的话题列表
      description: 获取指定用户关注的话题列表
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - name: user_id
          in: path
          type: integer
          description: 用户ID
      responses:
        200:
          description: 话题列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Topics'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /user:

    get:
      tags:
        - UserInfo
      summary: 获取当前登录用户的信息
      responses:
        200:
          description: 用户信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/User'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    patch:
      tags:
        - UserInfo
      summary: 更新当前登录用户信息
      parameters:
        - name: body
          in: body
          type: object
          schema:
            properties:
              headline:
                type: string
                description: 一句话介绍
              bio:
                type: string
                description: 个人简介
              blog:
                type: string
                description: 个人主页
              company:
                type: string
                description: 所属企业
              location:
                type: string
                description: 所属地区
      responses:
        200:
          description: 用户信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/User'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /user/avatar:

    post:
      tags:
        - UserAvatar
      summary: 上传当前登录用户的头像
      consumes:
        - multipart/form-data
      parameters:
        - name: avatar
          type: file
          in: formData
          description: 用户头像
      responses:
        200:
          description: 新头像地址
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/UserAvatar'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    delete:
      tags:
        - UserAvatar
      summary: 删除当前登录用户的头像，并重置为默认头像
      responses:
        200:
          description: 新头像地址
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/UserAvatar'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /user/cover:

    post:
      tags:
        - UserCover
      summary: 上传当前登录用户的封面
      consumes:
        - multipart/form-data
      parameters:
        - name: cover
          type: file
          in: formData
          description: 用户封面
      responses:
        200:
          description: 新封面地址
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/UserCover'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    delete:
      tags:
        - UserCover
      summary: 删除当前登录用户的封面，并重置为默认封面
      responses:
        200:
          description: 新封面地址
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/UserCover'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /user/register/email:

    post:
      tags:
        - UserRegister
      summary: 发送注册邮箱验证码
      description: |
        若返回信息中含参数 captcha_token 和 captcha_image，表示下次调用该接口时，需要用户输入图形验证码，并把 `captcha_token` 和 `captcha_code` 参数传递到服务端。
      parameters:
        - name: body
          in: body
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                description: 邮箱
              captcha_token:
                type: string
                description: 图形验证码token。若上一次请求返回了 captcha_token， 则必须传该参数
              captcha_code:
                type: string
                description: 图形验证码的值。若上一次请求返回了 captcha_token，则必须传该参数
      responses:
        200:
          description: 空数据，通过状态码区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /user/password/email:

    post:
      tags:
        - UserPasswordReset
      summary: 发送重置密码邮箱验证码
      description: |
        若返回参数中含参数 captcha_token 和 captcha_image，表示下次调用该接口时，需要用户输入图形验证码，并把 `captcha_token` 和 `captcha_code` 参数传递到服务端。
      parameters:
        - name: body
          in: body
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                description: 邮箱
              captcha_token:
                type: string
                description: 图形验证码token。若上一次请求返回了 captcha_token， 则必须传该参数
              captcha_code:
                type: string
                description: 图形验证码的值。若上一次请求返回了 captcha_token，则必须传该参数
      responses:
        200:
          description: 空数据，通过状态码区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /user/password:

    put:
      tags:
        - UserPasswordReset
      summary: 验证邮箱并更新密码
      parameters:
        - name: body
          in: body
          schema:
            type: object
            required:
              - email
              - email_code
              - password
            properties:
              email:
                type: string
                description: 邮箱
              email_code:
                type: string
                description: 邮箱验证码
              password:
                type: string
                description: hash1 加密后的密码
      responses:
        200:
          description: 空数据，通过状态码区分成功或失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /user/followers:

    get:
      tags:
        - UserFollow
      summary: 获取当前登录用户的关注者
      description: 获取当前登录用户的关注者
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
      responses:
        200:
          description: 用户列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Users'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /user/followees:

    get:
      tags:
        - UserFollow
      summary: 获取当前登录用户关注的用户
      description: 获取当前登录用户关注的用户
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
      responses:
        200:
          description: 用户列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Users'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /user/following/{user_id}:

    put:
      tags:
        - UserFollow
      summary: 添加关注
      description: 添加关注
      parameters:
        - name: user_id
          in: path
          type: integer
          description: 用户ID
      responses:
        200:
          description: 空数据，通过状态码区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    delete:
      tags:
        - UserFollow
      summary: 取消关注
      description: 取消关注
      parameters:
        - name: user_id
          in: path
          type: integer
          description: 用户ID
      responses:
        200:
          description: 空数据，通过状态码区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /user/following/questions:

    get:
      tags:
        - QuestionFollow
      summary: todo - 获取登录用户关注的问题
      description: 获取登录用户关注的问题
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
      responses:
        200:
          description: 问题列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Questions'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /user/following/questions/{question_id}:

    put:
      tags:
        - QuestionFollow
      summary: todo - 添加关注
      description: 取消关注
      parameters:
        - name: question_id
          in: path
          type: integer
          description: 问题ID
      responses:
        200:
          description: 空数据，通过状态码区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    delete:
      tags:
        - QuestionFollow
      summary: todo - 取消关注
      description: 取消关注
      parameters:
        - name: question_id
          in: path
          type: integer
          description: 问题ID
      responses:
        200:
          description: 空数据，通过状态码区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /user/following/articles:

    get:
      tags:
        - ArticleFollow
      summary: todo - 获取登录用户关注的文章
      description: 获取登录用户关注的文章
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
      responses:
        200:
          description: 文章列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Articles'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /user/following/articles/{article_id}:

    put:
      tags:
        - ArticleFollow
      summary: todo - 添加关注
      description: 取消关注
      parameters:
        - name: article_id
          in: path
          type: integer
          description: 文章ID
      responses:
        200:
          description: 空数据，通过状态码区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    delete:
      tags:
        - ArticleFollow
      summary: todo - 取消关注
      description: 取消关注
      parameters:
        - name: article_id
          in: path
          type: integer
          description: 文章ID
      responses:
        200:
          description: 空数据，通过状态码区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /user/following/topics:

    get:
      tags:
        - TopicFollow
      summary: 获取当前用户关注的话题列表
      description: 获取当前用户关注的话题列表
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
      responses:
        200:
          description: 话题列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Topics'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /user/following/topics/{topic_id}:

    put:
      tags:
        - TopicFollow
      summary: 关注指定话题
      parameters:
        - name: topic_id
          in: path
          type: integer
          description: 话题ID
      responses:
        200:
          description: 空数据，通过状态码区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    delete:
      tags:
        - TopicFollow
      summary: 取消关注指定话题
      parameters:
        - name: topic_id
          in: path
          type: integer
          description: 话题ID
      responses:
        200:
          description: 空数据，通过状态码区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /articles:

    get:
      tags:
        - Article
      summary: todo - 获取文章列表
      description: |
        管理员可排序的字段包括：
        管理员可筛选的字段包括：
        普通用户可排序的字段包括：
        普通用户可筛选的字段包括：
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - $ref: '#/parameters/order'
        - $ref: '#/parameters/filter'
      responses:
        200:
          description: 文章列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Articles'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    post:
      tags:
        - Article
      summary: todo - 发表文章
      description: 发表问题。若启用了 markdown 功能，则需要传入 content_markdown，否则需要传入 content_rendered。
      parameters:
        - name: body
          in: body
          schema:
            type: object
            required:
              - title
            properties:
              title:
                type: string
                description: 标题
              topic_ids:
                type: string
                description: 话题ID，多个ID用“，”分隔
              content_markdown:
                type: string
                description: Markdown 格式的正文
              content_rendered:
                type: string
                description: HTML 格式的正文
      responses:
        200:
          description: 文章详情
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Article'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /articles/{article_id}:

    get:
      tags:
        - Article
      summary: todo - 获取指定文章信息
      description: 获取指定文章信息
      parameters:
        - name: article_id
          in: path
          type: integer
          description: 文章ID
      responses:
        200:
          description: 文章信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Article'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    patch:
      tags:
        - Article
      summary: todo - 更新文章信息
      description: 更新文章信息
      security:
      - token: []

    delete:
      tags:
        - Article
      summary: todo - 删除指定文章
      description: 删除指定文章
      parameters:
        - name: article_id
          type: integer
          in: path
          description: 文章ID
      responses:
        200:
          description: 空数据，通过状态吗区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /articles/{article_id}/votes:

    post:
      tags:
        - Article
      summary: todo - 为文章投票
      description: 为文章投票
      parameters:
        - name: article_id
          in: path
          type: integer
          description: 文章ID
        - name: body
          in: body
          schema:
            type: object
            required:
              - type
            properties:
              type:
                type: string
                enum:
                  - up
                  - down
                  - neutral
                description: 投票类型
      responses:
        200:
          description: 关注信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Vote'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /articles/{article_id}/followers:

    get:
      tags:
        - ArticleFollow
      summary: todo - 获取指定文章的关注者
      description: 获取指定文章的关注者
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - name: article_id
          in: path
          type: integer
          description: 文章ID
      responses:
        200:
          description: 关注者列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Users'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /articles/{article_id}/comments:

    get:
      tags:
        - Article
      summary: todo - 获取指定文章的评论列表
      description: |
        默认排序方式为 `create_time ASC`
        <br/>
        **可添加的排序参数为：**
        `create_time`
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - $ref: '#/parameters/order'
        - name: article_id
          in: path
          type: integer
          description: 文章ID
      responses:
        200:
          description: 评论列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Comments'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    post:
      tags:
        - Article
      summary: todo - 在指定文章下发表评论
      description: 在指定文章下发表评论
      parameters:
        - name: article_id
          in: path
          type: integer
          description: 文章ID
        - name: body
          in: body
          schema:
            type: object
            required:
              - content
            properties:
              content:
                type: string
                description: 评论内容
      responses:
        200:
          description: 评论详情
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Comment'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /questions:

    get:
      tags:
        - Question
      summary: todo - 获取问题列表
      description: |
        默认排序方式为 `update_time DESC`
        <br/>
        **管理员可排序的字段包括**：
        `question_id`
        `user_id`
        `comment_count`
        `answer_count`
        `view_count`
        `follower_count`
        `last_answer_time`
        `create_time`
        `update_time`
        <br/>
        **管理员可筛选的字段包括**：
        `question_id`
        `user_id`
        <br/>
        **普通用户可排序的字段包括**：
        `answer_count`
        `update_time`
        <br/>
        **普通用户可筛选的字段包括**：无
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - $ref: '#/parameters/order'
        - $ref: '#/parameters/filter'
      responses:
        200:
          description: 问题列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Questions'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    post:
      tags:
        - Question
      summary: todo(含 topic_ids 时未测试) -  发表问题
      description: |
        若启用了 markdown 功能，则需要传入 content_markdown，否则需要传入 content_rendered。
      parameters:
        - name: body
          in: body
          schema:
            type: object
            required:
              - title
            properties:
              title:
                type: string
                description: 标题
              topic_ids:
                type: string
                description: 话题ID，多个ID用“,”分隔
              content_markdown:
                type: string
                description: Markdown 格式的正文
              content_rendered:
                type: string
                description: HTML 格式的正文
      responses:
        200:
          description: 问题详情
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Question'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    delete:
      tags:
        - Question
      summary: todo - 🔐批量删除问题
      description: |
        **仅管理员可调用该接口**
        只要没有错误异常，无论是否有问题被删除，该接口都会返回成功。
      parameters:
        - name: question_id
          in: query
          type: string
          description: 用“,”分隔的问题ID，最多可提供100个ID
      responses:
        200:
          description: 空数据，通过状态码区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /questions/{question_id}:

    get:
      tags:
        - Question
      summary: todo - 获取指定问题信息
      description: 获取指定问题信息
      parameters:
        - name: question_id
          in: path
          type: integer
          description: 问题ID
      responses:
        200:
          description: 问题信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Question'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    patch:
      tags:
        - Question
      summary: todo -  更新问题信息
      description: 更新问题信息
      security:
        - token: []

    delete:
      tags:
        - Question
      summary: todo - 删除指定问题
      description: |
        **仅管理员可调用该接口**
      parameters:
        - name: question_id
          type: integer
          in: path
          description: 问题ID
      responses:
        200:
          description: 空数据，通过状态码区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /questions/{question_id}/votes:

    post:
      tags:
        - Question
      summary: todo - 为问题投票
      description: 为问题投票
      parameters:
        - name: question_id
          in: path
          type: integer
          description: 问题ID
        - name: body
          in: body
          schema:
            type: object
            required:
              - type
            properties:
              type:
                type: string
                enum:
                  - up
                  - down
                  - neutral
                description: 投票类型
      responses:
        200:
          description: 关注信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Vote'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /questions/{question_id}/followers:

    get:
      tags:
        - QuestionFollow
      summary: todo - 获取指定问题的关注者
      description: 获取指定问题的关注者
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - name: question_id
          in: path
          type: integer
          description: 问题ID
      responses:
        200:
          description: 关注者列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Users'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /questions/{question_id}/comments:

    get:
      tags:
        - Question
      summary: todo - 获取指定问题的评论列表
      description: |
        默认排序方式为 `create_time ASC`
        <br/>
        **可添加的排序参数为：**
        `create_time`
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - $ref: '#/parameters/order'
        - name: question_id
          in: path
          type: integer
          description: 问题ID
      responses:
        200:
          description: 评论列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Comments'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    post:
      tags:
        - Question
      summary: todo - 在指定问题下发表评论
      description: 在指定问题下发表评论
      parameters:
        - name: question_id
          in: path
          type: integer
          description: 问题ID
        - name: body
          in: body
          schema:
            type: object
            required:
              - content
            properties:
              content:
                type: string
                description: 评论内容
      responses:
        200:
          description: 评论详情
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Comment'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /questions/{question_id}/answers:

    get:
      tags:
        - Answer
      summary: todo -  获取指定问题下的回答
      description: 获取指定问题下的回答，可排序字段为 `create_time`
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - $ref: '#/parameters/order'
        - name: question_id
          in: path
          type: integer
          description: 问题ID
      responses:
        200:
          description: 回答列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Answers'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    post:
      tags:
        - Answer
      summary: todo -  在指定问题下创建一个回答
      description: 在指定问题下创建一个回答
      parameters:
        - name: question_id
          in: path
          type: integer
          description: 问题ID
        - name: body
          in: body
          schema:
            type: object
            properties:
              content_markdown:
                type: string
                description: markdown 格式的内容
              content_rendered:
                type: string
                description: html 格式的内容
      responses:
        200:
          description: 回答信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Answer'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /topics:

    get:
      tags:
        - Topic
      summary: 获取全部话题
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - name: order
          type: string
          in: query
          description: 排序方式，可以为 `topic_id`、`follower_count` 默认为 `topic_id`。在字段前加 `-` 表示倒序排列。
        - name: topic_id
          type: integer
          in: query
          description: 话题ID
        - name: name
          type: string
          in: query
          description: 话题名称
      responses:
        200:
          description: 话题列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Topics'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    post:
      tags:
        - Topic
      summary: 🔐发布话题
      description: |
        **仅管理员可调用该接口**
      parameters:
        - name: name
          type: string
          in: formData
          description: 话题名称
        - name: description
          type: string
          in: formData
          description: 话题描述
        - name: cover
          type: file
          in: formData
          description: 封面图片
      responses:
        200:
          description: 话题信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Topic'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    delete:
      tags:
        - Topic
      summary: 🔐批量删除话题
      description: |
        **仅管理员可调用该接口**
        只要没有错误异常，无论是否有话题被删除，该接口都会返回成功。
      parameters:
        - name: topic_id
          in: query
          type: string
          description: 用“,”分隔的话题ID，最多可提供100个ID
      responses:
        200:
          description: 空数据，通过状态码区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /topics/{topic_id}:

    get:
      tags:
        - Topic
      summary: 获取指定话题信息
      description: 获取指定话题信息
      parameters:
        - name: topic_id
          in: path
          type: integer
          description: 话题ID
      responses:
        200:
          description: 话题信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Topic'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    post:
      tags:
        - Topic
      summary: 🔐更新话题信息
      description: |
        **仅管理员可调用该接口**
        <br/>
        formData 数据只能通过 post 请求提交，所以这里不用 patch 请求
      parameters:
        - name: topic_id
          type: integer
          in: path
          description: 话题ID
        - name: name
          type: string
          in: formData
          description: 话题名称
        - name: description
          type: string
          in: formData
          description: 话题描述
        - name: cover
          type: file
          in: formData
          description: 封面图片
      responses:
        200:
          description: 更新后的话题信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Topic'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    delete:
      tags:
        - Topic
      summary: 🔐删除话题
      description: |
        **仅管理员可调用该接口**
      parameters:
        - name: topic_id
          type: integer
          in: path
          description: 话题ID
      responses:
        200:
          description: 空数据，通过状态码区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /topics/{topic_id}/followers:

    get:
      tags:
        - TopicFollow
      summary: 获取指定话题的关注者
      description: 获取指定话题的关注者
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - name: topic_id
          in: path
          type: integer
          description: 话题ID
      responses:
        200:
          description: 关注者列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Users'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /answers:

    get:
      tags:
        - Answer
      summary: todo - 🔐获取所有回答列表
      description: 获取所有回答列表，仅管理员可使用该接口
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - $ref: '#/parameters/order'
        - $ref: '#/parameters/filter'
      responses:
        200:
          description: 回答列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Answers'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /answers/{answer_id}:

    get:
      tags:
        - Answer
      summary: todo -  获取回答详情
      description: 获取回答详情
      parameters:
        - name: answer_id
          in: path
          type: integer
          description: 回答ID
      responses:
        200:
          description: 回答信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Answer'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    patch:
      tags:
        - Answer
      summary: todo - 🔐修改回答信息
      description: 修改回答信息，仅管理员可使用该接口
      parameters:
        - name: answer_id
          in: path
          type: integer
          description: 回答ID
        - name: body
          in: body
          schema:
            type: object
            properties:
              content_markdown:
                type: string
                description: markdown 格式的内容
              content_rendered:
                type: string
                description: html 格式的内容
      responses:
        200:
          description: 回答信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Answer'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    delete:
      tags:
        - Answer
      summary: todo - 🔐删除指定回答
      description: 删除指定回答，仅管理员可使用该接口
      parameters:
        - name: answer_id
          type: integer
          in: path
          description: 回答ID
      responses:
        200:
          description: 空数据，通过状态码区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /answers/{answer_id}/votes:

    post:
      tags:
        - Answer
      summary: todo - 为回答投票
      description: 为回答投票
      parameters:
        - name: answer_id
          in: path
          type: integer
          description: 回答ID
        - name: body
          in: body
          schema:
            type: object
            required:
              - type
            properties:
              type:
                type: string
                enum:
                  - up
                  - down
                  - neutral
                description: 投票类型
      responses:
        200:
          description: 关注信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Vote'
        default:
          $ref: '#/responses/Error'
        security:
          - token: []

  /answers/{answer_id}/comments:

    get:
      tags:
        - Answer
      summary: todo - 获取指定回答的评论列表
      description: |
        默认排序方式为 `create_time ASC`
        <br/>
        **可添加的排序参数为：**
        `create_time`
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - $ref: '#/parameters/order'
        - name: answer_id
          in: path
          type: integer
          description: 回答ID
      responses:
        200:
          description: 评论列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Comments'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    post:
      tags:
        - Answer
      summary: todo - 在指定回答下发表评论
      description: 在指定回答下发表评论
      parameters:
        - name: answer_id
          in: path
          type: integer
          description: 回答ID
        - name: body
          in: body
          schema:
            type: object
            required:
              - content
            properties:
              content:
                type: string
                description: 评论内容
      responses:
        200:
          description: 评论详情
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Comment'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /comments:

    get:
      tags:
        - Comment
      summary: todo - 获取所有评论
      description: 获取所有评论
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - $ref: '#/parameters/order'
        - $ref: '#/parameters/filter'
      responses:
        200:
          description: 评论列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Comments'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /comments/{comment_id}:

    get:
      tags:
        - Comment
      summary: todo - 获取评论详情
      description: 获取评论详情
      parameters:
        - name: comment_id
          in: path
          type: integer
          description: 评论ID
      responses:
        200:
          description: 评论详情
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Comment'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    patch:
      tags:
        - Comment
      summary: todo - 修改评论
      description: 修改评论
      parameters:
        - name: comment_id
          in: path
          type: integer
          description: 评论ID
        - name: body
          in: body
          schema:
            type: object
            required:
              - content
            properties:
              content:
                type: string
                description: 评论内容
      responses:
        200:
          description: 评论详情
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Comment'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    delete:
      tags:
        - Comment
      summary: todo - 删除评论
      description: 删除评论
      parameters:
        - name: comment_id
          in: path
          type: integer
          description: 评论ID
      responses:
        200:
          description: 空数据，通过状态码区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /comments/{comment_id}/votes:

    post:
      tags:
        - Comment
      summary: todo - 为评论投票
      description: 为评论投票
      parameters:
        - name: comment_id
          in: path
          type: integer
          description: 评论ID
        - name: body
          in: body
          schema:
            type: object
            required:
              - type
            properties:
              type:
                type: string
                enum:
                  - up
                  - down
                  - neutral
                description: 投票类型
      responses:
        200:
          description: 关注信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Vote'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /reports:

    get:
      tags:
        - Report
      summary: todo - 获取举报列表
      description: 获取举报列表
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - $ref: '#/parameters/order'
        - $ref: '#/parameters/filter'
      responses:
        200:
          description: 举报列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Reports'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    post:
      tags:
        - Report
      summary: todo - 添加举报
      description: 添加举报
      parameters:
        - name: body
          in: body
          schema:
            type: object
            required:
              - reportable_id
              - reportable_type
              - reason
            properties:
              reportable_id:
                type: integer
                description: 举报目标ID
              reportable_type:
                type: string
                description: 举报目标类型
                enum:
                  - question
                  - answer
                  - article
                  - comment
              reason:
                type: string
                description: 举报理由
      responses:
        200:
          description: 举报详情
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Report'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /reports/{report_id}:

    delete:
      tags:
        - Report
      summary: todo - 处理完一个举报
      description: 处理完一个举报
      parameters:
        - name: report_id
          type: integer
          in: path
          description: 举报ID
      responses:
        200:
          description: 空数据，通过状态吗区分成功还是失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /images:

    post:
      tags:
        - Image
      summary: todo -  上传图片
      description: 上传图片
      consumes:
        - multipart/form-data
      parameters:
        - name: image
          type: file
          in: formData
          description: 图片
      responses:
        200:
          description: 图片信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Image'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /emails:

    post:
      tags:
        - Email
      summary: 🔐发送邮件
      description: |
        **用于后台管理员发送邮件，需要管理员权限**
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/Email'
      responses:
        200:
          description: 邮件信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Email'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /captchas:

    post:
      tags:
        - Captcha
      summary: 生成新的图形验证码
      responses:
        200:
          description: 图形验证码信息
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
                properties:
                  captcha_token:
                    type: string
                    description: 图形验证码token
                  captcha_image:
                    type: string
                    description: base64格式的图形验证码图片
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /trash:

    delete:
      tags:
        - Trash
      summary: todo - 🔐清空回收站
      parameters:
        - name: type
          in: query
          type: string
          description: 资源类型，包括 `topic`、`question`、`answer`、`article`、`comment`。默认为空，即清空所有资源。

  /trash/users:

    get:
      tags:
        - Trash
      summary: todo - 🔐获取用户列表
      description: |
        **可排序的字段包括**：
        `user_id`
        `last_login_time`
        `follower_count`
        `following_article_count`
        `following_question_count`
        `following_topic_count`
        `following_user_count`
        `article_count`
        `question_count`
        `answer_count`
        `notification_unread`
        `inbox_unread`
        `create_time`
        `update_time`
        `disable_time`
        若未指定排序字段，则默认按 `disable_time` 倒序排列

        **可筛选的字段包括**：
        `user_id`
        `username`
        `email`
        `create_ip`
        `last_login_ip`
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - $ref: '#/parameters/order'
        - $ref: '#/parameters/filter'
      responses:
        200:
          description: 用户列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Users'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /trash/users/{user_id}:

    post:
      tags:
        - Trash
      summary: todo - 🔐恢复指定用户
      description:
      responses:
        200:
          description: 用户信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/User'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /trash/topics:

    get:
      tags:
        - Trash
      summary: todo - 🔐获取话题列表
      description: |
        **可排序的字段包括**：
        `topic_id`
        `article_count`
        `question_count`
        `follower_count`
        `delete_time`
        若未指定排序字段，则按 `delete_time` 倒序排列

        **可筛选的字段包括**：
        `topic_id`
        `name`
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - $ref: '#/parameters/order'
        - $ref: '#/parameters/filter'
      responses:
        200:
          description: 话题列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Topics'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /trash/topics/{topic_id}:

    post:
      tags:
        - Trash
      summary: todo - 🔐恢复指定话题
      description:
      responses:
        200:
          description: 话题信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Topic'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    delete:
      tags:
        - Trash
      summary: todo - 🔐删除指定话题
      description:
      responses:
        200:
          description: 空数据，根据状态码判断成功或失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /trash/questions:

    get:
      tags:
        - Trash
      summary: todo - 🔐获取问题列表
      description: |
        **可排序的字段包括**：
        `question_id`
        `user_id`
        `comment_count`
        `answer_count`
        `view_count`
        `follower_count`
        `last_answer_time`
        `create_time`
        `update_time`
        `delete_time

        **可筛选的字段包括**：
        `question_id`
        `user_id`
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - $ref: '#/parameters/order'
        - $ref: '#/parameters/filter'
      responses:
        200:
          description: 问题列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Questions'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /trash/questions/{question_id}:

    post:
      tags:
        - Trash
      summary: todo - 🔐恢复指定问题
      description:
      responses:
        200:
          description: 问题信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Question'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    delete:
      tags:
        - Trash
      summary: todo - 🔐删除指定问题
      description:
      responses:
        200:
          description: 空数据，根据状态码判断成功或失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /trash/answers:

    get:
      tags:
        - Trash
      summary: todo - 🔐获取回答列表
      description:
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - $ref: '#/parameters/order'
        - $ref: '#/parameters/filter'
      responses:
        200:
          description: 回答列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Answers'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /trash/answers/{answer_id}:

    post:
      tags:
        - Trash
      summary: todo - 🔐恢复指定回答
      description:
      responses:
        200:
          description: 回答信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Answer'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    delete:
      tags:
        - Trash
      summary: todo - 🔐删除指定回答
      description:
      responses:
        200:
          description: 空数据，根据状态码判断成功或失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /trash/articles:

    get:
      tags:
        - Trash
      summary: todo - 🔐获取文章列表
      description:
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - $ref: '#/parameters/order'
        - $ref: '#/parameters/filter'
      responses:
        200:
          description: 文章列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Articles'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /trash/articles/{article_id}:

    post:
      tags:
        - Trash
      summary: todo - 🔐恢复指定文章
      description:
      responses:
        200:
          description: 文章信息
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Article'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

    delete:
      tags:
        - Trash
      summary: todo - 🔐删除指定文章
      description:
      responses:
        200:
          description: 空数据，根据状态码判断成功或失败
          schema:
            properties:
              code:
                type: integer
              data:
                type: object
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /trash/comments:

    get:
      tags:
        - Trash
      summary: todo - 🔐获取评论列表
      description:
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/per_page'
        - $ref: '#/parameters/order'
        - $ref: '#/parameters/filter'
      responses:
        200:
          description: 评论列表
          schema:
            properties:
              code:
                type: integer
              data:
                $ref: '#/definitions/Comments'
              pagination:
                $ref: '#/definitions/Pagination'
        default:
          $ref: '#/responses/Error'
      security:
        - token: []

  /trash/comments/{comment_id}:

    post:
      tags:
        - Trash
      summary: todo - 🔐恢复指定回答
      description:
      security:
        - token: []

    delete:
      tags:
        - Trash
      summary: todo - 🔐删除指定回答
      description:
      security:
        - token: []

securityDefinitions:

  token:
    type: apiKey
    name: token
    in: header


definitions:

  Pagination:
    type: object
    properties:
      page:
        type: integer
        description: 当前页码
      per_page:
        type: integer
        description: 每页条数
      previous:
        type: integer
        description: 上一页页码，为 `null` 表示没有上一页
      next:
        type: integer
        description: 下一页页码，为 `null` 表示没有下一页
      total:
        type: integer
        description: 数据总数
      pages:
        type: integer
        description: 总页数

  Option:
    type: object
    properties:
      cache_memcached_host:
        type: string
        description: 🔐Memcached 服务器地址
      cache_memcached_password:
        type: string
        description: 🔐Memcached 密码
      cache_memcached_port:
        type: string
        description: 🔐Memcached 端口号
      cache_memcached_username:
        type: string
        description: 🔐Memcached 用户名
      cache_redis_host:
        type: string
        description: 🔐Redis 服务器地址
      cache_redis_password:
        type: string
        description: 🔐Redis 密码
      cache_redis_port:
        type: string
        description: 🔐Redis 端口号
      cache_redis_username:
        type: string
        description: 🔐Redis 用户名
      cache_type:
        type: string
        enum:
          - pdo
          - redis
          - memcached
        description: 🔐缓存类型
      enable_markdown:
        type: integer
        enum:
          - 0
          - 1
        description: 🔐是否启用 markdown
      language:
        type: string
        enum:
          - en
          - pl
          - ru
          - zh-cn
          - zh-tw
        description: 系统语言
      site_description:
        type: string
        description: 站点简介
      site_gongan_beian:
        type: string
        description: 站点公安备案号
      site_icp_beian:
        type: string
        description: 站点 ICP 备案号
      site_keywords:
        type: string
        description: 站点关键词
      site_name:
        type: string
        description: 站点名称
      site_static_url:
        type: string
        description: 🔐静态资源 URL 地址
      smtp_host:
        type: string
        description: 🔐SMTP 服务器地址
      smtp_password:
        type: string
        description: 🔐SMTP 密码
      smtp_port:
        type: integer
        description: 🔐SMTP 端口
      smtp_reply_to:
        type: string
        description: 🔐SMTP 回信地址
      smtp_secure:
        type: string
        description: 🔐SMTP 加密方式
      smtp_username:
        type: string
        description: 🔐SMTP 账户
      storage_aliyun_oss_access_id:
        type: string
        description: 🔐阿里云 AccessKey ID
      storage_aliyun_oss_access_secret:
        type: string
        description: 🔐阿里云 Access Key Secret
      storage_aliyun_oss_bucket:
        type: string
        description: 🔐阿里云 OSS 的 Bucket 名称
      storage_aliyun_oss_endpoint:
        type: string
        description: 🔐阿里云 OSS 的 EndPoint
      storage_ftp_host:
        type: string
        description: 🔐FTP 服务器地址
      storage_ftp_passive:
        type: integer
        enum:
          - 1
          - 0
        description: 🔐FTP 是否被动连接
      storage_ftp_password:
        type: string
        description: 🔐FTP 密码
      storage_ftp_port:
        type: integer
        description: 🔐FTP 端口号
      storage_ftp_root:
        type: string
        description: 🔐FTP 存储目录
      storage_ftp_ssl:
        type: integer
        enum:
          - 1
          - 0
        description: 🔐FTP 是否启用 SSL
      storage_ftp_timeout:
        type: integer
        description: 🔐FTP 连接超时时间
      storage_ftp_username:
        type: string
        description: 🔐FTP 用户名
      storage_local_dir:
        type: string
        description: 🔐本地文件存储目录
      storage_qiniu_access_id:
        type: string
        description: 🔐七牛云 AccessKey
      storage_qiniu_access_secret:
        type: string
        description: 🔐七牛云 SecretKey
      storage_qiniu_bucket:
        type: string
        description: 🔐七牛云 Bucket
      storage_qiniu_endpoint:
        type: string
        description: 🔐七牛云域名
      storage_type:
        type: string
        enum:
          - local
          - ftp
          - aliyun_oss
          - upyun
          - qiniu
        description: 🔐存储类型
      storage_upyun_bucket:
        type: string
        description: 🔐又拍云 Bucket
      storage_upyun_endpoint:
        type: string
        description: 🔐又拍云域名
      storage_upyun_operator:
        type: string
        description: 🔐又拍云操作员账号
      storage_upyun_password:
        type: string
        description: 🔐又拍云操作员密码
      storage_url:
        type: string
        description: 🔐本地文件访问链接
      theme:
        type: string
        description: 🔐主题名称

  User:
    type: object
    properties:
      user_id:
        type: integer
        description: 用户 ID
      username:
        type: string
        description: 用户名
      email:
        type: string
        description: 🔐邮箱
      avatar:
        type: object
        $ref: '#/definitions/UserAvatar'
      cover:
        type: object
        $ref: '#/definitions/UserCover'
      create_ip:
        type: string
        description: 🔐注册 IP
      last_login_time:
        type: integer
        description: 🔐最后登陆时间
      last_login_ip:
        type: string
        description: 🔐最后登陆 IP
      follower_count:
        type: integer
        description: 关注者数量
      following_article_count:
        type: integer
        description: 关注的文章数量
      following_question_count:
        type: integer
        description: 关注的问题数量
      following_topic_count:
        type: integer
        description: 关注的话题数量
      following_user_count:
        type: integer
        description: 关注的用户数量
      article_count:
        type: integer
        description: 发表的文章数量
      question_count:
        type: integer
        description: 发表的问题数量
      answer_count:
        type: integer
        description: 发表的问题回答数量
      notification_unread:
        type: integer
        description: 🔐未读消息数量
      inbox_unread:
        type: integer
        description: 🔐未读私信数量
      headline:
        type: string
        description: 一句话介绍自己
      bio:
        type: string
        description: 个人简介
      blog:
        type: string
        description: 个人主页链接
      company:
        type: string
        description: 所属企业
      location:
        type: string
        description: 所在地区
      create_time:
        type: integer
        description: 注册时间
      update_time:
        type: integer
        description: 🔐更新时间
      disable_time:
        type: integer
        description: 🔐禁用时间
      relationship:
        type: object
        $ref: '#/definitions/UserRelationship'

  Users:
    type: array
    items:
      $ref: '#/definitions/User'

  UserAvatar:
    type: object
    properties:
      s:
        type: string
        description: 小头像地址
      m:
        type: string
        description: 中头像地址
      l:
        type: string
        description: 大头像地址

  UserCover:
    type: object
    properties:
      s:
        type: string
        description: 小型封面地址
      m:
        type: string
        description: 中型封面地址
      l:
        type: string
        description: 大型封面地址

  Question:
    type: object
    properties:
      question_id:
        type: integer
        description: 问题ID
      user_id:
        type: integer
        description: 用户ID
      title:
        type: string
        description: 问题标题
      content_markdown:
        type: string
        description: Markdown 格式的问题内容
      content_rendered:
        type: string
        description: HTML 格式的问题内容
      comment_count:
        type: integer
        description: 评论数量
      answer_count:
        type: integer
        description: 回答数量
      view_count:
        type: integer
        description: 浏览量
      follower_count:
        type: integer
        description: 关注者数量
      last_answer_time:
        type: integer
        description: 最后回答时间
      create_time:
        type: integer
        description: 创建时间
      update_time:
        type: integer
        description: 更新时间（更新问题本身，或在问题下发表回答，都会更新该字段）
      delete_time:
        type: integer
        description: 🔐删除时间
      relationship:
        type: object
        $ref: '#/definitions/QuestionRelationship'

  Questions:
    type: array
    items:
      $ref: '#/definitions/Question'

  Answer:
    type: object
    properties:
      answer_id:
        type: integer
        description: 回答ID
      question_id:
        type: integer
        description: 问题ID
      user_id:
        type: integer
        description: 用户ID
      content_markdown:
        type: string
        description: markdown 格式的内容
      content_rendered:
        type: string
        description: html 格式的内容
      comment_count:
        type: integer
        description: 评论数量
      create_time:
        type: integer
        description: 创建时间
      update_time:
        type: integer
        description: 🔐更新时间
      delete_time:
        type: integer
        description: 🔐删除时间
      relationship:
        type: object
        $ref: '#/definitions/AnswerRelationship'

  Answers:
    type: array
    items:
      $ref: '#/definitions/Answer'

  Topic:
    type: object
    properties:
      topic_id:
        type: integer
        description: 话题ID
      name:
        type: string
        description: 话题名称
      cover:
        type: object
        $ref: '#/definitions/TopicCover'
      description:
        type: string
        description: 话题描述
      article_count:
        type: integer
        description: 文章数量
      question_count:
        type: integer
        description: 问题数量
      follower_count:
        type: integer
        description: 关注者数量
      delete_time:
        type: integer
        description: 🔐删除时间
      relationship:
        type: object
        $ref: '#/definitions/TopicRelationship'

  Topics:
    type: array
    items:
      $ref: '#/definitions/Topic'

  TopicCover:
    type: object
    properties:
      s:
        type: string
        description: 小型封面地址
      m:
        type: string
        description: 中型封面地址
      l:
        type: string
        description: 大型封面地址

  Article:
    type: object
    properties:
      article_id:
        type: integer
        description: 文章ID
      user_id:
        type: integer
        description: 用户ID
      title:
        type: string
        description: 文章标题
      content_markdown:
        type: string
        description: Markdown 格式的文章内容
      content_rendered:
        type: string
        description: HTML 格式的文章内容
      comment_count:
        type: integer
        description: 评论数量
      view_count:
        type: integer
        description: 浏览量
      follower_count:
        type: integer
        description: 关注者数量
      create_time:
        type: integer
        description: 创建时间
      update_time:
        type: integer
        description: 更新时间（用户可以更新自己的文章）
      delete_time:
        type: integer
        description: 🔐删除时间
      relationship:
        type: object
        $ref: '#/definitions/ArticleRelationship'

  Articles:
    type: array
    items:
      $ref: '#/definitions/Article'

  Comment:
    type: object
    properties:
      comment_id:
        type: integer
        description: 评论ID
      commentable_id:
        type: integer
        description: 评论目标的ID
      commentable_type:
        type: string
        description: 评论目标类型
        enum:
          - article
          - question
          - answer
      user_id:
        type: integer
        description: 用户ID
      content:
        type: string
        description: 评论内容
      create_time:
        type: integer
        description: 发表时间
      update_time:
        type: integer
        description: 修改时间
      delete_time:
        type: integer
        description: 删除时间
      relationship:
        type: object
        $ref: '#/definitions/CommentRelationship'

  Comments:
    type: array
    items:
      $ref: '#/definitions/Comment'

  Vote:
    type: object
    description: 投票
    properties:
      user_id:
        type: integer
        description: 用户ID
      voteable_id:
        type: integer
        description: 投票目标的ID
      voteable_type:
        type: string
        description: 投票目标类型
        enum:
          - question
          - answer
          - article
          - comment
      type:
        type: string
        description: 投票类型
        enum:
          - up
          - down
          - neutral
      create_time:
        type: integer
        description: 投票时间
      vote_count:
        type: integer
        description: 投票目标获得的总投票量

  Report:
    type: object
    description: 举报
    properties:
      report_id:
        type: integer
        description: 举报ID
      reportable_id:
        type: integer
        description: 举报目标的ID
      reportable_type:
        type: string
        description: 举报目标类型
        enum:
          - question
          - answer
          - article
          - comment
      reportable_object:
        type: object
        description: 举报目标详情
      user_id:
        type: integer
        description: 用户ID
      reason:
        type: string
        description: 举报理由
      create_time:
        type: string
        description: 举报时间

  Reports:
    type: array
    items:
      $ref: '#/definitions/Report'

  Image:
    type: object
    properties:
      hash:
        type: string
        description: 图片的 hash 值
      filename:
        type: string
        description: 图片原始文件名
      width:
        type: integer
        description: 原始图片宽度
      height:
        type: integer
        description: 原始图片高度
      create_time:
        type: integer
        description: 图片上传时间
      item_type:
        type: string
        description: 图片关联对象类型
      item_id:
        type: integer
        description: 图片管理对象ID
      urls:
        type: object
        properties:
          o:
            type: string
            description: 原图地址
          r:
            type: string
            description: 宽度固定，高度自适应的图片地址
          t:
            type: string
            description: 固定宽高的缩略图地址

  Email:
    type: object
    required:
      - email
      - subject
      - content
    properties:
      email:
        type: string
        description: 邮箱地址，多个地址间用“,”分隔，最多支持100个
      subject:
        type: string
        description: 邮件标题
      content:
        type: string
        description: 邮件内容

  UserRelationship:
    type: object
    properties:
      is_me:
        type: boolean
        description: 该用户是否是当前登录用户
      is_following:
        type: boolean
        description: 登录用户是否已关注该用户
      is_followed:
        type: boolean
        description: 该用户是否已关注登录用户

  QuestionRelationship:
    type: object
    properties:
      user:
        $ref: '#/definitions/UserInRelationship'
      topics:
        $ref: '#/definitions/TopicsInRelationship'
      is_following:
        type: boolean
        description: 当前登录用户是否已关注该问题

  AnswerRelationship:
    type: object
    properties:
      user:
        $ref: '#/definitions/UserInRelationship'

  TopicRelationship:
    type: object
    properties:
      is_following:
        type: boolean
        description: 当前登录用户是否已关注该话题

  ArticleRelationship:
    type: object
    properties:
      user:
        $ref: '#/definitions/UserInRelationship'
      topics:
        $ref: '#/definitions/TopicsInRelationship'
      is_following:
        type: boolean
        description: 当前登录用户是否已关注该文章

  CommentRelationship:
    type: object
    properties:
      user:
        $ref: '#/definitions/UserInRelationship'

  UserInRelationship:
    type: object
    properties:
      user_id:
        type: integer
        description: 用户ID
      username:
        type: string
        description: 用户名
      headline:
        type: string
        description: 一句话介绍
      avatar:
        type: object
        $ref: '#/definitions/UserAvatar'

  TopicsInRelationship:
    type: array
    items:
      type: object
      properties:
        topic_id:
          type: integer
          description: 话题 ID
        name:
          type: string
          description: 话题名称
        cover:
          type: object
          $ref: '#/definitions/TopicCover'

parameters:

  token:
    name: token
    in: header
    type: string
    description: token

  page:
    name: page
    in: query
    type: string
    description: 当前页数

  per_page:
    name: per_page
    in: query
    type: string
    description: 每页条数（最大为 100）

  order:
    name: order
    in: query
    type: string
    description: 排序条件

  filter:
    name: filter
    in: query
    type: string
    description: 筛选条件

responses:
  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        description: 错误代码
      message:
        type: string
        description: 错误描述
      extra_message:
        type: string
        description: 额外的错误描述
      captcha_token:
        type: string
        description: 图形验证码token。若返回了该参数，表示下次调用该接口需要输入图形验证码
      captcha_image:
        type: string
        description: 图形验证码的base64格式图片
      errors:
        type: array
        items:
          $ref: '#/responses/ErrorField'

  ErrorField:
    type: object
    required:
      - field
      - message
    properties:
      field:
        type: string
        description: 错误字段名
      message:
        type: string
        description: 错误描述

tags:
  - name: Option
    description: 系统设置
  - name: UserLogin
    description: 登录
  - name: UserRegister
    description: 注册
  - name: UserPasswordReset
    description: 重置密码
  - name: UserInfo
    description: 用户信息
  - name: UserAvatar
    description: 用户头像
  - name: UserCover
    description: 用户封面
  - name: UserFollow
    description: 用户关注
  - name: Topic
    description: 话题信息
  - name: TopicFollow
    description: 话题关注
  - name: Question
    description: 问题信息
  - name: QuestionFollow
    description: 问题关注
  - name: Answer
    description: 回答信息
  - name: Article
    description: 文章信息
  - name: ArticleFollow
    description: 文章关注
  - name: Comment
    description: 评论
  - name: Report
    description: 举报
  - name: Inbox
    description: 私信
  - name: Notification
    description: 通知
  - name: Captcha
    description: 图形验证码
  - name: Email
    description: 邮件
  - name: Image
    description: 图片
  - name: Trash
    description: 回收站

externalDocs:
  description: 更多文档参见
  url: https://mdclub.org
