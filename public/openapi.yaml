# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md
openapi: 3.0.2


info:
  title: MDClub API 文档
  description: |
    MDClub 是一个 Material Design 风格的社区应用。

    **接口文档说明**

    * 接口描述中，若含 🔐 图标，表示该接口仅管理员有权限调用。
    * 接口返回值的字段描述中，若含 🔐 图标，表示只有管理员调用接口时，返回值中才会包含该字段。
    * 接口参数的描述中，若含 🔐 图标，表示只有管理员才能添加该参数。

    `GET`、`PUT`、`DELETE` 请求均符合幂等性。
  termsOfService: https://github.com/zdhxiong
  contact:
    name: zdhxiong
    url: https://github.com/zdhxiong
    email: zdhxiong@gmail.com
  license:
    name: GPL-2.0
    url: https://github.com/zdhxiong/mdclub/blob/master/LICENSE
  version: 1.0.0


servers:
  - url: /api
    description: 当前服务器
  - url: '{protocol}://{host}/api'
    description: 指定的服务器
    variables:
      protocol:
        default: http
        enum:
          - http
          - https
      host:
        default: mdclub.test


paths:

  /options:

    get:
      summary: 获取站点全局设置参数
      responses:
        '200':
          $ref: '#/components/responses/Option'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Option

    patch:
      summary: 🔐更新站点全局设置
      description: 仅管理员可调用该接口
      requestBody:
        $ref: '#/components/requestBodies/Option'
      responses:
        '200':
          $ref: '#/components/responses/Option'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Option

  /tokens:

    post:
      summary: 生成 Token
      description: |
        通过账号密码登陆，返回带 Token 的用户信息。

        若登录失败，且返回信息中含参数 `captcha_token` 和 `captcha_image`，
        表示下次调用该接口时，需要用户输入图形验证码，并把 `captcha_token` 和 `captcha_code` 参数传递到服务端。
      requestBody:
        $ref: '#/components/requestBodies/UserLogin'
      responses:
        '200':
          $ref: '#/components/responses/UserWithToken'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserLogin

  /users:

    get:
      summary: 获取用户列表
      description: |
        不包含已禁用的用户。仅管理员可使用 email 参数进行搜索。

        可排序字段包括 `create_time`、`follower_count`，默认为 `create_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/user_id.query'
        - $ref: '#/components/parameters/username.query'
        - $ref: '#/components/parameters/email.query'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserInfo

    post:
      summary: 验证邮箱并创建账号
      requestBody:
        $ref: '#/components/requestBodies/UserRegister'
      responses:
        '200':
          $ref: '#/components/responses/UserWithToken'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserRegister

    delete:
      summary: 🔐批量禁用用户
      description: 仅管理员可调用该接口。只要没有异常错误，无论是否有用户被禁用，该接口都会返回成功。
      parameters:
        - $ref: '#/components/parameters/user_ids'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserInfo

  /users/{user_id}:

    parameters:
      - $ref: '#/components/parameters/user_id.path'

    get:
      summary: 获取指定用户信息
      description: |
        若是管理员调用该接口、或当前登录用户读取自己的个人信息，将返回用户的所有信息。
        其他情况仅返回部分字段（去掉了隐私信息，隐私字段已用 🔐 标明）
      responses:
        '200':
          $ref: '#/components/responses/User'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserInfo

    patch:
      summary: 🔐更新指定用户信息
      description: 仅管理员可调用该接口
      requestBody:
        $ref: '#/components/requestBodies/UserUpdate'
      responses:
        '200':
          $ref: '#/components/responses/User'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserInfo

    delete:
      summary: 🔐禁用指定用户
      description: 仅管理员可调用该接口
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserInfo

  /users/{user_id}/avatar:

    parameters:
      - $ref: '#/components/parameters/user_id.path'

    delete:
      summary: 🔐删除指定用户的头像，并重置为默认头像
      description: 仅管理员可调用该接口
      responses:
        '200':
          $ref: '#/components/responses/UserAvatar'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserAvatar

  /users/{user_id}/cover:

    parameters:
      - $ref: '#/components/parameters/user_id.path'

    delete:
      summary: 🔐删除指定用户的封面，并重置为默认封面
      description: 仅管理员可调用该接口
      responses:
        '200':
          $ref: '#/components/responses/UserCover'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserCover

  /users/{user_id}/followers:

    parameters:
      - $ref: '#/components/parameters/user_id.path'

    get:
      summary: 获取指定用户的关注者
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserFollow

    post:
      summary: 添加关注
      responses:
        '200':
          $ref: '#/components/responses/FollowerCount'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserFollow

    delete:
      summary: 取消关注
      responses:
        '200':
          $ref: '#/components/responses/FollowerCount'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserFollow

  /users/{user_id}/followees:

    parameters:
      - $ref: '#/components/parameters/user_id.path'

    get:
      summary: 获取指定用户关注的用户列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserFollow

  /users/{user_id}/following_questions:

    parameters:
      - $ref: '#/components/parameters/user_id.path'

    get:
      summary: 获取指定用户关注的提问列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          $ref: '#/components/responses/Questions'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - QuestionFollow

  /users/{user_id}/following_articles:

    parameters:
      - $ref: '#/components/parameters/user_id.path'

    get:
      summary: 获取指定用户关注的文章列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          $ref: '#/components/responses/Articles'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - ArticleFollow

  /users/{user_id}/following_topics:

    parameters:
      - $ref: '#/components/parameters/user_id.path'

    get:
      summary: 获取指定用户关注的话题列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          $ref: '#/components/responses/Topics'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - TopicFollow

  /users/{user_id}/questions:

    parameters:
      - $ref: '#/components/parameters/user_id.path'

    get:
      summary: 获取指定用户发表的提问
      description: 可排序字段包括 `vote_count`、`create_time`、`update_time`，默认为 `-update_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          $ref: '#/components/responses/Questions'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Question

  /users/{user_id}/answers:

    parameters:
      - $ref: '#/components/parameters/user_id.path'

    get:
      summary: 获取指定用户发表的回答
      description: 可排序字段包括 `vote_count`、`create_time`、`update_time`，默认为 `-create_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          $ref: '#/components/responses/Answers'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Answer

  /users/{user_id}/articles:

    parameters:
      - $ref: '#/components/parameters/user_id.path'

    get:
      summary: 获取指定用户发表的文章
      description: 可排序字段包括 `vote_count`、`create_time`、`update_time`，默认为 `-create_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          $ref: '#/components/responses/Articles'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Article

  /users/{user_id}/comments:

    parameters:
      - $ref: '#/components/parameters/user_id.path'

    get:
      summary: 获取指定用户发表的评论
      description: 可排序字段包括 `vote_count`、`create_time`，默认为 `-create_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          $ref: '#/components/responses/Comments'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Comment

  /user:

    get:
      summary: 获取当前登录用户的信息
      responses:
        '200':
          $ref: '#/components/responses/User'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserInfo

    patch:
      summary: 更新当前登录用户信息
      requestBody:
        $ref: '#/components/requestBodies/UserUpdate'
      responses:
        '200':
          $ref: '#/components/responses/User'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserInfo

  /user/avatar:

    post:
      summary: 上传当前登录用户的头像
      requestBody:
        $ref: '#/components/requestBodies/UserAvatar'
      responses:
        '200':
          $ref: '#/components/responses/UserAvatar'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserAvatar

    delete:
      summary: 删除当前登录用户的头像，并重置为默认头像
      responses:
        '200':
          $ref: '#/components/responses/UserAvatar'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserAvatar

  /user/cover:

    post:
      summary: 上传当前登录用户的封面
      requestBody:
        $ref: '#/components/requestBodies/UserCover'
      responses:
        '200':
          $ref: '#/components/responses/UserCover'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserCover

    delete:
      summary: 删除当前登录用户的封面，并重置为默认封面
      responses:
        '200':
          $ref: '#/components/responses/UserCover'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserCover

  /user/register/email:

    post:
      summary: 发送注册邮箱验证码
      description: |
        若返回信息中含参数 captcha_token 和 captcha_image，表示下次调用该接口时，需要用户输入图形验证码，
        并把 `captcha_token` 和 `captcha_code` 参数传递到服务端。
      requestBody:
        $ref: '#/components/requestBodies/UserSendEmail'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserRegister

  /user/password/email:

    post:
      summary: 发送重置密码邮箱验证码
      description: |
        若返回参数中含参数 captcha_token 和 captcha_image，表示下次调用该接口时，需要用户输入图形验证码，
        并把 `captcha_token` 和 `captcha_code` 参数传递到服务端。
      requestBody:
        $ref: '#/components/requestBodies/UserSendEmail'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserPasswordReset

  /user/password:

    put:
      summary: 验证邮箱并更新密码
      requestBody:
        $ref: '#/components/requestBodies/UserPasswordReset'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserPasswordReset

  /user/followers:

    get:
      summary: 获取当前登录用户的关注者
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserFollow

  /user/followees:

    get:
      summary: 获取当前登录用户关注的用户
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserFollow

  /user/following_questions:

    get:
      summary: 获取登录用户关注的提问
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          $ref: '#/components/responses/Questions'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - QuestionFollow

  /user/following_articles:

    get:
      summary: 获取登录用户关注的文章
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          $ref: '#/components/responses/Articles'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - ArticleFollow

  /user/following_topics:

    get:
      summary: 获取登录用户关注的话题
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          $ref: '#/components/responses/Topics'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - TopicFollow

  /user/questions:

    get:
      summary: 获取登录用户发表的提问
      description: 可排序字段包括 `vote_count`、`create_time`、`update_time`，默认为 `-update_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          $ref: '#/components/responses/Questions'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Question

  /user/answers:

    get:
      summary: 获取当前登录用户发表的回答
      description: 可排序字段包括 `vote_count`、`create_time`、`update_time`，默认为 `-create_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          $ref: '#/components/responses/Answers'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Answer

  /user/articles:

    get:
      summary: 获取当前登录用户发表的文章
      description: 可排序字段包括 `vote_count`、`create_time`、`update_time`，默认为 `-create_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          $ref: '#/components/responses/Articles'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Article

  /user/comments:

    get:
      summary: 获取当前登录用户发表的评论
      description: 可排序字段包括 `vote_count`、`create_time`，默认为 `-create_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          $ref: '#/components/responses/Comments'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Comment

  /articles:

    get:
      summary: 获取文章列表
      description: 可排序字段包括 `vote_count`、`create_time`、`update_time`，默认为 `-create_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/article_id.query'
        - $ref: '#/components/parameters/user_id.query'
        - $ref: '#/components/parameters/topic_id.query'
      responses:
        '200':
          $ref: '#/components/responses/Articles'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Article

    post:
      summary: 发表文章
      description: |
        `content_markdown` 和 `content_rendered` 两个参数仅传入其中一个即可，
        若两个参数都传入，则以 `content_markdown` 为准。
      requestBody:
        $ref: '#/components/requestBodies/Article'
      responses:
        '200':
          $ref: '#/components/responses/Article'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Article

    delete:
      summary: 🔐批量删除文章
      description: 仅管理员可调用该接口。只要没有错误异常，无论是否有文章被删除，该接口都会返回成功。
      parameters:
        - $ref: '#/components/parameters/article_ids'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Article

  /articles/{article_id}:

    parameters:
      - $ref: '#/components/parameters/article_id.path'

    get:
      summary: 获取指定文章信息
      responses:
        '200':
          $ref: '#/components/responses/Article'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Article

    patch:
      summary: 更新文章信息
      description: |
        仅文章的作者和管理员可以修改文章信息。

        `content_markdown` 和 `content_rendered` 两个参数仅传入其中一个即可，
        若两个参数都传入，则以 `content_markdown` 为准。
      requestBody:
        $ref: '#/components/requestBodies/Article'
      responses:
        '200':
          $ref: '#/components/responses/Article'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Article

    delete:
      summary: 删除指定文章
      description: 仅文章作者和管理员可以删除文章
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Article

  /articles/{article_id}/voters:

    parameters:
      - $ref: '#/components/parameters/article_id.path'

    get:
      summary: 获取文章的投票者
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/vote_type.query'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - ArticleVote

    post:
      summary: 为文章投票
      requestBody:
        $ref: '#/components/requestBodies/Vote'
      responses:
        '200':
          $ref: '#/components/responses/VoteCount'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - ArticleVote

    delete:
      summary: 取消为文章的投票
      responses:
        '200':
          $ref: '#/components/responses/VoteCount'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - ArticleVote

  /articles/{article_id}/followers:

    parameters:
      - $ref: '#/components/parameters/article_id.path'

    get:
      summary: 获取指定文章的关注者
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - ArticleFollow

    post:
      summary: 添加关注
      responses:
        '200':
          $ref: '#/components/responses/FollowerCount'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - ArticleFollow

    delete:
      summary: 取消关注
      responses:
        '200':
          $ref: '#/components/responses/FollowerCount'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - ArticleFollow

  /articles/{article_id}/comments:

    parameters:
      - $ref: '#/components/parameters/article_id.path'

    get:
      summary: 获取指定文章的评论列表
      description: 可排序字段包括 `vote_count`、`create_time`，默认为 `create_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          $ref: '#/components/responses/Comments'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - ArticleComment

    post:
      summary: 在指定文章下发表评论
      requestBody:
        $ref: '#/components/requestBodies/Comment'
      responses:
        '200':
          $ref: '#/components/responses/Comment'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - ArticleComment

  /questions:

    get:
      summary: 获取提问列表
      description: 可排序字段包括 `vote_count`、`create_time`、`update_time`，默认为 `-update_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/question_id.query'
        - $ref: '#/components/parameters/user_id.query'
        - $ref: '#/components/parameters/topic_id.query'
      responses:
        '200':
          $ref: '#/components/responses/Questions'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Question

    post:
      summary: 发表提问
      description: |
        `content_markdown` 和 `content_rendered` 两个参数仅传入其中一个即可，
        若两个参数都传入，则以 `content_markdown` 为准。
      requestBody:
        $ref: '#/components/requestBodies/Question'
      responses:
        '200':
          $ref: '#/components/responses/Question'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Question

    delete:
      summary: 🔐批量删除提问
      description: |
        仅管理员可调用该接口。
        只要没有错误异常，无论是否有提问被删除，该接口都会返回成功。
      parameters:
        - $ref: '#/components/parameters/question_ids'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Question

  /questions/{question_id}:

    parameters:
      - $ref: '#/components/parameters/question_id.path'

    get:
      summary: 获取指定提问信息
      responses:
        '200':
          $ref: '#/components/responses/Question'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Question

    patch:
      summary: 更新提问信息
      description: |
        仅提问的作者和管理员可以修改提问信息。

        `content_markdown` 和 `content_rendered` 两个参数仅传入其中一个即可，
        若两个参数都传入，则以 `content_markdown` 为准。
      requestBody:
        $ref: '#/components/requestBodies/Question'
      responses:
        '200':
          $ref: '#/components/responses/Question'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Question

    delete:
      summary: 删除指定提问
      description: 仅提问作者和管理员可以删除提问
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Question

  /questions/{question_id}/voters:

    parameters:
      - $ref: '#/components/parameters/question_id.path'

    get:
      summary: 获取提问的投票者
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/vote_type.query'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - QuestionVote

    post:
      summary: 为提问投票
      requestBody:
        $ref: '#/components/requestBodies/Vote'
      responses:
        '200':
          $ref: '#/components/responses/VoteCount'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - QuestionVote

    delete:
      summary: 取消为提问的投票
      responses:
        '200':
          $ref: '#/components/responses/VoteCount'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - QuestionVote

  /questions/{question_id}/followers:

    parameters:
      - $ref: '#/components/parameters/question_id.path'

    get:
      summary: 获取指定提问的关注者
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - QuestionFollow

    post:
      summary: 添加关注
      responses:
        '200':
          $ref: '#/components/responses/FollowerCount'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - QuestionFollow

    delete:
      summary: 取消关注
      responses:
        '200':
          $ref: '#/components/responses/FollowerCount'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - QuestionFollow

  /questions/{question_id}/comments:

    parameters:
      - $ref: '#/components/parameters/question_id.path'

    get:
      summary: 获取指定提问的评论
      description: 可排序字段包括 `vote_count`、`create_time`，默认为 `create_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          $ref: '#/components/responses/Comments'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - QuestionComment

    post:
      summary: 在指定提问下发表评论
      requestBody:
        $ref: '#/components/requestBodies/Comment'
      responses:
        '200':
          $ref: '#/components/responses/Comment'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - QuestionComment

  /questions/{question_id}/answers:

    parameters:
      - $ref: '#/components/parameters/question_id.path'

    get:
      summary: 获取指定提问下的回答
      description: 可排序字段包括 `vote_count`、`create_time`、`update_time`，默认为 `-create_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          $ref: '#/components/responses/Answers'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Answer

    post:
      summary: 在指定提问下发表回答
      description: |
        `content_markdown` 和 `content_rendered` 两个参数仅传入其中一个即可，
        若两个参数都传入，则以 `content_markdown` 为准。
      requestBody:
        $ref: '#/components/requestBodies/Answer'
      responses:
        '200':
          $ref: '#/components/responses/Answer'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Answer

  /topics:

    get:
      summary: 获取全部话题
      description: 可排序字段包括 `topic_id`、`follower_count` 默认为 `topic_id`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/topic_id.query'
        - $ref: '#/components/parameters/topic_name.query'
      responses:
        '200':
          $ref: '#/components/responses/Topics'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Topic

    post:
      summary: 🔐发布话题
      description: 仅管理员可调用该接口
      requestBody:
        $ref: '#/components/requestBodies/Topic'
      responses:
        '200':
          $ref: '#/components/responses/Topic'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Topic

    delete:
      summary: 🔐批量删除话题
      description: |
        仅管理员可调用该接口。只要没有错误异常，
        无论是否有话题被删除，该接口都会返回成功。
      parameters:
        - $ref: '#/components/parameters/topic_ids'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Topic

  /topics/{topic_id}:

    parameters:
      - $ref: '#/components/parameters/topic_id.path'

    get:
      summary: 获取指定话题信息
      responses:
        '200':
          $ref: '#/components/responses/Topic'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Topic

    post:
      summary: 🔐更新话题信息
      description: |
        **仅管理员可调用该接口**

        formData 数据只能通过 post 请求提交，所以这里不用 patch 请求
      requestBody:
        $ref: '#/components/requestBodies/Topic'
      responses:
        '200':
          $ref: '#/components/responses/Topic'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Topic

    delete:
      summary: 🔐删除话题
      description: 仅管理员可调用该接口
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Topic

  /topics/{topic_id}/followers:

    parameters:
      - $ref: '#/components/parameters/topic_id.path'

    get:
      summary: 获取指定话题的关注者
      description: 不含已禁用的用户
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - TopicFollow

    post:
      summary: 关注指定话题
      responses:
        '200':
          $ref: '#/components/responses/FollowerCount'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - TopicFollow

    delete:
      summary: 取消关注指定话题
      responses:
        '200':
          $ref: '#/components/responses/FollowerCount'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - TopicFollow

  /topics/{topic_id}/questions:

    parameters:
      - $ref: '#/components/parameters/topic_id.path'

    get:
      summary: 获取指定话题下的提问
      description: 可排序字段包括 `vote_count`、`create_time`、`update_time`，默认为 `-update_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          $ref: '#/components/responses/Questions'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Question

  /topics/{topic_id}/articles:

    parameters:
      - $ref: '#/components/parameters/topic_id.path'

    get:
      summary: 获取指定话题下的文章
      description: 可排序字段包括 `vote_count`、`create_time`、`update_time`，默认为 `-update_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          $ref: '#/components/responses/Articles'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Article

  /answers:

    get:
      summary: 获取回答列表
      description: 可排序字段包括 `vote_count`、`create_time`、`update_time`，默认为 `-create_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/answer_id.query'
        - $ref: '#/components/parameters/question_id.query'
        - $ref: '#/components/parameters/user_id.query'
      responses:
        '200':
          $ref: '#/components/responses/Answers'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Answer

    delete:
      summary: 🔐批量删除回答
      description: |
        仅管理员可调用该接口。
        只要没有错误异常，无论是否有回答被删除，该接口都会返回成功。
      parameters:
        - $ref: '#/components/parameters/answer_ids'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Answer

  /answers/{answer_id}:

    parameters:
      - $ref: '#/components/parameters/answer_id.path'

    get:
      summary: 获取回答详情
      responses:
        '200':
          $ref: '#/components/responses/Answer'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Answer

    patch:
      summary: 修改回答信息
      description: |
        仅回答的作者和管理员可以修改文章信息。

        `content_markdown` 和 `content_rendered` 两个参数仅传入其中一个即可，
        若两个参数都传入，则以 `content_markdown` 为准。
      requestBody:
        $ref: '#/components/requestBodies/Answer'
      responses:
        '200':
          $ref: '#/components/responses/Answer'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Answer

    delete:
      summary: 删除指定回答
      description: 仅回答作者和管理员可以删除文章
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Answer

  /answers/{answer_id}/voters:

    parameters:
      - $ref: '#/components/parameters/answer_id.path'

    get:
      summary: 获取回答的投票者
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/vote_type.query'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - AnswerVote

    post:
      summary: 为回答投票
      requestBody:
        $ref: '#/components/requestBodies/Vote'
      responses:
        '200':
          $ref: '#/components/responses/VoteCount'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - AnswerVote

    delete:
      summary: 取消为回答的投票
      responses:
        '200':
          $ref: '#/components/responses/VoteCount'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - AnswerVote

  /answers/{answer_id}/comments:

    parameters:
      - $ref: '#/components/parameters/answer_id.path'

    get:
      summary: 获取指定回答的评论
      description: 可排序字段包括 `vote_count`、`create_time`，默认为 `create_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          $ref: '#/components/responses/Comments'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - AnswerComment

    post:
      summary: 在指定回答下发表评论
      requestBody:
        $ref: '#/components/requestBodies/Comment'
      responses:
        '200':
          $ref: '#/components/responses/Comment'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - AnswerComment

  /comments:

    get:
      summary: 获取所有评论
      description: 可排序字段包括 `vote_count`、`create_time`，默认为 `-create_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/comment_id.query'
        - $ref: '#/components/parameters/commentable_id.query'
        - $ref: '#/components/parameters/commentable_type.query'
        - $ref: '#/components/parameters/user_id.query'
      responses:
        '200':
          $ref: '#/components/responses/Comments'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Comment

    delete:
      summary: 🔐批量删除评论
      description: |
        仅管理员可调用该接口。
        只要没有错误异常，无论是否有评论被删除，该接口都会返回成功。
      parameters:
        - $ref: '#/components/parameters/comment_ids'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Comment

  /comments/{comment_id}:

    parameters:
      - $ref: '#/components/parameters/comment_id.path'

    get:
      summary: 获取评论详情
      responses:
        '200':
          $ref: '#/components/responses/Comment'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Comment

    patch:
      summary: 修改评论
      description: 仅评论的作者和管理员可以修改评论。
      requestBody:
        $ref: '#/components/requestBodies/Comment'
      responses:
        '200':
          $ref: '#/components/responses/Comment'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Comment

    delete:
      summary: 删除评论
      description: 仅评论作者和管理员可删除评论
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Comment

  /comments/{comment_id}/voters:

    parameters:
      - $ref: '#/components/parameters/comment_id.path'

    get:
      summary: 获取评论的投票者
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/vote_type.query'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - CommentVote

    post:
      summary: 为评论投票
      requestBody:
        $ref: '#/components/requestBodies/Vote'
      responses:
        '200':
          $ref: '#/components/responses/VoteCount'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - CommentVote

    delete:
      summary: 取消为评论的投票
      responses:
        '200':
          $ref: '#/components/responses/VoteCount'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - CommentVote

  /reports:

    get:
      summary: 🔐获取被举报的内容列表
      description: 仅管理员可调用该接口
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/reportable_type.query'
      responses:
        '200':
          $ref: '#/components/responses/ReportGroups'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Report

    delete:
      summary: 🔐批量删除举报
      description: |
        仅管理员可调用该接口。
        只要没有错误异常，无论是否有记录被删除，该接口都会返回成功。
      parameters:
        - $ref: '#/components/parameters/report_target'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Report

  /reports/{reportable_type}/{reportable_id}:

    parameters:
      - $ref: '#/components/parameters/reportable_type.path'
      - $ref: '#/components/parameters/reportable_id.path'

    get:
      summary: 🔐获取被举报内容的举报详情
      description: 仅管理员可调用该接口
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          $ref: '#/components/responses/Reports'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Report

    post:
      summary: 添加举报
      requestBody:
        $ref: '#/components/requestBodies/Report'
      responses:
        '200':
          $ref: '#/components/responses/Report'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Report

    delete:
      summary: 🔐删除举报
      description: 仅管理员可调用该接口
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Report

  /images:

    get:
      summary: 🔐获取图片列表
      description: 仅管理员可调用该接口
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/image_hash.query'
        - $ref: '#/components/parameters/image_item_type.query'
        - $ref: '#/components/parameters/image_item_id.query'
        - $ref: '#/components/parameters/user_id.query'
      responses:
        '200':
          $ref: '#/components/responses/Images'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Image

    post:
      summary: 上传图片
      requestBody:
        $ref: '#/components/requestBodies/Image'
      responses:
        '200':
          $ref: '#/components/responses/Image'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Image

    delete:
      summary: 🔐批量删除图片
      description: |
        仅管理员可调用该接口。
        只要没有错误异常，无论是否有记录被删除，该接口都会返回成功。
      parameters:
        - $ref: '#/components/parameters/image_hashs'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Image

  /images/{hash}:

    parameters:
      - $ref: '#/components/parameters/image_hash.path'

    get:
      summary: 获取指定图片信息
      responses:
        '200':
          $ref: '#/components/responses/Image'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Image

    patch:
      summary: 🔐更新指定图片信息
      description: 仅管理员可调用该接口
      requestBody:
        $ref: '#/components/requestBodies/ImageFilename'
      responses:
        '200':
          $ref: '#/components/responses/Image'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Image

    delete:
      summary: 🔐删除指定图片
      description: 仅管理员可调用该接口
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Image

  /emails:

    post:
      summary: 🔐发送邮件
      description: 用于后台管理员发送邮件，需要管理员权限
      requestBody:
        $ref: '#/components/requestBodies/Email'
      responses:
        '200':
          $ref: '#/components/responses/Email'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Email

  /captchas:

    post:
      summary: 生成新的图形验证码
      responses:
        '200':
          $ref: '#/components/responses/Captcha'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - Captcha

  /trash/users:

    get:
      summary: 🔐获取已禁用用户列表
      description: |
        仅管理员可调用该接口。

        可排序字段包括 `create_time`、`delete_time`、`follower_count`，默认为 `-delete_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/user_id.query'
        - $ref: '#/components/parameters/username.query'
        - $ref: '#/components/parameters/email.query'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserDisabled

    post:
      summary: 🔐批量恢复用户
      description: |
        仅管理员可调用该接口。
        只要没有异常错误，无论是否有用户被禁用，该接口都会返回成功。
      parameters:
        - $ref: '#/components/parameters/user_ids'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserDisabled

  /trash/users/{user_id}:

    parameters:
      - $ref: '#/components/parameters/user_id.path'

    post:
      summary: 🔐恢复指定用户
      responses:
        '200':
          $ref: '#/components/responses/User'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - UserDisabled

  /trash/topics:

    get:
      summary: 🔐获取回收站中的话题列表
      description: |
        仅管理员可调用该接口。
        可排序字段包括 `topic_id`、`follower_count`、`delete_time` 默认为 `-delete_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/topic_id.query'
        - $ref: '#/components/parameters/topic_name.query'
      responses:
        '200':
          $ref: '#/components/responses/Topics'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - TopicTrash

    post:
      summary: todo - 🔐批量恢复话题
      description: |
        仅管理员可调用该接口。
        只要没有异常错误，无论是否有用户被禁用，该接口都会返回成功。
      parameters:
        - $ref: '#/components/parameters/topic_ids'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - TopicTrash

    delete:
      summary: todo - 🔐批量删除回收站中的话题
      description: |
        仅管理员可调用该接口

        只要没有异常错误，无论是否有用户被禁用，该接口都会返回成功。

        若没有提供 topic_id 参数，则将清空回收站中的所有话题。
      parameters:
        - $ref: '#/components/parameters/topic_ids'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - TopicTrash

  /trash/topics/{topic_id}:

    parameters:
      - $ref: '#/components/parameters/topic_id.path'

    post:
      summary: todo - 🔐恢复指定话题
      responses:
        '200':
          $ref: '#/components/responses/Topic'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - TopicTrash

    delete:
      summary: todo - 🔐删除指定话题
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - TopicTrash

  /trash/questions:

    get:
      summary: 🔐获取回收站中的提问列表
      description: |
        仅管理员可调用该接口。
        可排序字段包括 `vote_count`、`create_time`、`update_time`、`delete_time`，默认为 `-delete_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/question_id.query'
        - $ref: '#/components/parameters/user_id.query'
        - $ref: '#/components/parameters/topic_id.query'
      responses:
        '200':
          $ref: '#/components/responses/Questions'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - QuestionTrash

    post:
      summary: todo - 🔐批量恢复提问
      description: |
        仅管理员可调用该接口。
        只要没有异常错误，无论是否有用户被禁用，该接口都会返回成功。
      parameters:
        - $ref: '#/components/parameters/question_ids'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - QuestionTrash

    delete:
      summary: todo - 🔐批量删除回收站中的提问
      description: |
        仅管理员可调用该接口

        只要没有异常错误，无论是否有用户被禁用，该接口都会返回成功。

        若没有提供 question_id 参数，则将清空回收站中的所有提问。
      parameters:
        - $ref: '#/components/parameters/question_ids'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - QuestionTrash

  /trash/questions/{question_id}:

    parameters:
      - $ref: '#/components/parameters/question_id.path'

    post:
      summary: todo - 🔐恢复指定提问
      responses:
        '200':
          $ref: '#/components/responses/Question'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - QuestionTrash

    delete:
      summary: todo - 🔐删除指定提问
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - QuestionTrash

  /trash/answers:

    get:
      summary: 🔐获取回收站中的回答列表
      description: |
        仅管理员可调用该接口。
        可排序字段包括 `vote_count`、`create_time`、`update_time`、`delete_time`，默认为 `-delete_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/answer_id.query'
        - $ref: '#/components/parameters/question_id.query'
        - $ref: '#/components/parameters/user_id.query'
      responses:
        '200':
          $ref: '#/components/responses/Answers'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - AnswerTrash

    post:
      summary: todo - 🔐批量恢复回答
      description: |
        仅管理员可调用该接口。
        只要没有异常错误，无论是否有用户被禁用，该接口都会返回成功。
      parameters:
        - $ref: '#/components/parameters/answer_ids'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - AnswerTrash

    delete:
      summary: todo - 🔐批量删除回收站中的回答
      description: |
        仅管理员可调用该接口

        只要没有异常错误，无论是否有用户被禁用，该接口都会返回成功。

        若没有提供 answer_id 参数，则将清空回收站中的所有回答。
      parameters:
        - $ref: '#/components/parameters/answer_ids'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - AnswerTrash

  /trash/answers/{answer_id}:

    parameters:
      - $ref: '#/components/parameters/answer_id.path'

    post:
      summary: todo - 🔐恢复指定回答
      responses:
        '200':
          $ref: '#/components/responses/Answer'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - AnswerTrash

    delete:
      summary: todo - 🔐删除指定回答
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - AnswerTrash

  /trash/articles:

    get:
      summary: 🔐获取回收站中的文章列表
      description: |
        仅管理员可调用该接口。
        可排序字段包括 `vote_count`、`create_time`、`update_time`、`delete_time`，默认为 `-delete_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/article_id.query'
        - $ref: '#/components/parameters/user_id.query'
        - $ref: '#/components/parameters/topic_id.query'
      responses:
        '200':
          $ref: '#/components/responses/Articles'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - ArticleTrash

    post:
      summary: todo - 🔐批量恢复文章
      description: |
        仅管理员可调用该接口。
        只要没有异常错误，无论是否有用户被禁用，该接口都会返回成功。
      parameters:
        - $ref: '#/components/parameters/article_ids'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - ArticleTrash

    delete:
      summary: todo - 🔐批量删除回收站中的话题
      description: |
        仅管理员可调用该接口

        只要没有异常错误，无论是否有用户被禁用，该接口都会返回成功。

        若没有提供 topic_id 参数，则将清空回收站中的所有文章。
      parameters:
        - $ref: '#/components/parameters/topic_ids'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - ArticleTrash

  /trash/articles/{article_id}:

    parameters:
      - $ref: '#/components/parameters/article_id.path'

    post:
      summary: todo - 🔐恢复指定文章
      responses:
        '200':
          $ref: '#/components/responses/Article'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - ArticleTrash

    delete:
      summary: todo - 🔐删除指定文章
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - ArticleTrash

  /trash/comments:

    get:
      summary: 🔐获取回收站中的评论列表
      description: |
        仅管理员可调用该接口。
        可排序字段包括 `vote_count`、`create_time`、`delete_time`，默认为 `-delete_time`
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/comment_id.query'
        - $ref: '#/components/parameters/commentable_id.query'
        - $ref: '#/components/parameters/commentable_type.query'
        - $ref: '#/components/parameters/user_id.query'
      responses:
        '200':
          $ref: '#/components/responses/Comments'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - CommentTrash

    post:
      summary: todo - 🔐批量恢复话题
      description: |
        仅管理员可调用该接口。
        只要没有异常错误，无论是否有用户被禁用，该接口都会返回成功。
      parameters:
        - $ref: '#/components/parameters/comment_ids'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - CommentTrash

    delete:
      summary: todo - 🔐批量删除回收站中的话题
      description: |
        仅管理员可调用该接口

        只要没有异常错误，无论是否有用户被禁用，该接口都会返回成功。

        若没有提供 comment_id 参数，则将清空回收站中的所有评论。
      parameters:
        - $ref: '#/components/parameters/comment_ids'
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - CommentTrash

  /trash/comments/{comment_id}:

    parameters:
      - $ref: '#/components/parameters/comment_id.path'

    post:
      summary: todo - 🔐恢复指定评论
      responses:
        '200':
          $ref: '#/components/responses/Comment'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - CommentTrash

    delete:
      summary: todo - 🔐删除指定评论
      responses:
        '200':
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Error'
      tags:
        - CommentTrash


components:

  schemas:

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          description: 错误代码
        message:
          type: string
          description: 错误描述
        extra_message:
          type: string
          description: 额外的错误描述
        captcha_token:
          type: string
          description: 图形验证码token。若返回了该参数，表示下次调用该接口需要输入图形验证码
        captcha_image:
          type: string
          description: 图形验证码的base64格式图片
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorField'

    ErrorField:
      type: object
      required:
        - field
        - message
      properties:
        field:
          type: string
          description: 错误字段名
        message:
          type: string
          description: 错误描述

    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: 当前页码
        per_page:
          type: integer
          description: 每页条数
        previous:
          type: integer
          description: 上一页页码，为 `null` 表示没有上一页
        next:
          type: integer
          description: 下一页页码，为 `null` 表示没有下一页
        total:
          type: integer
          description: 数据总数
        pages:
          type: integer
          description: 总页数

    Option:
      type: object
      properties:
        cache_memcached_host:
          type: string
          description: 🔐Memcached 服务器地址
        cache_memcached_password:
          type: string
          description: 🔐Memcached 密码
        cache_memcached_port:
          type: string
          description: 🔐Memcached 端口号
        cache_memcached_username:
          type: string
          description: 🔐Memcached 用户名
        cache_prefix:
          type: string
          description: 🔐缓存键名前缀（只能包含字符 -+.A-Za-z0-9）
        cache_redis_host:
          type: string
          description: 🔐Redis 服务器地址
        cache_redis_password:
          type: string
          description: 🔐Redis 密码
        cache_redis_port:
          type: string
          description: 🔐Redis 端口号
        cache_redis_username:
          type: string
          description: 🔐Redis 用户名
        cache_type:
          type: string
          enum:
            - redis
            - memcached
          description: 🔐缓存类型
        language:
          type: string
          enum:
            - en
            - pl
            - ru
            - zh-CN
            - zh-TW
          description: 系统语言
        site_description:
          type: string
          description: 站点简介
        site_gongan_beian:
          type: string
          description: 站点公安备案号
        site_icp_beian:
          type: string
          description: 站点 ICP 备案号
        site_keywords:
          type: string
          description: 站点关键词
        site_name:
          type: string
          description: 站点名称
        site_static_url:
          type: string
          description: 🔐静态资源 URL 地址
        smtp_host:
          type: string
          description: 🔐SMTP 服务器地址
        smtp_password:
          type: string
          description: 🔐SMTP 密码
        smtp_port:
          type: integer
          description: 🔐SMTP 端口
        smtp_reply_to:
          type: string
          description: 🔐SMTP 回信地址
        smtp_secure:
          type: string
          description: 🔐SMTP 加密方式
        smtp_username:
          type: string
          description: 🔐SMTP 账户
        storage_aliyun_access_id:
          type: string
          description: 🔐阿里云 AccessKey ID
        storage_aliyun_access_secret:
          type: string
          description: 🔐阿里云 Access Key Secret
        storage_aliyun_bucket:
          type: string
          description: 🔐阿里云 OSS 的 Bucket 名称
        storage_aliyun_endpoint:
          type: string
          description: 🔐阿里云 OSS 的 EndPoint
        storage_ftp_host:
          type: string
          description: 🔐FTP 服务器地址
        storage_ftp_passive:
          type: integer
          enum:
            - 1
            - 0
          description: 🔐是否使用被动传输模式。1（被动模式）；0（主动模式）
        storage_ftp_password:
          type: string
          description: 🔐FTP 密码
        storage_ftp_port:
          type: integer
          description: 🔐FTP 端口号
        storage_ftp_root:
          type: string
          description: 🔐FTP 存储目录
        storage_ftp_ssl:
          type: integer
          enum:
            - 1
            - 0
          description: 🔐FTP 是否启用 SSL。1（启用）；0（不启用）
        storage_ftp_username:
          type: string
          description: 🔐FTP 用户名
        storage_local_dir:
          type: string
          description: 🔐本地文件存储目录
        storage_qiniu_access_id:
          type: string
          description: 🔐七牛云 AccessKey
        storage_qiniu_access_secret:
          type: string
          description: 🔐七牛云 SecretKey
        storage_qiniu_bucket:
          type: string
          description: 🔐七牛云 Bucket
        storage_qiniu_endpoint:
          type: string
          description: 🔐七牛云域名
        storage_sftp_host:
          type: string
          description: 🔐SFTP 服务器地址
        storage_sftp_password:
          type: string
          description: 🔐SFTP 密码
        storage_sftp_port:
          type: integer
          description: 🔐SFTP 端口号
        storage_sftp_root:
          type: string
          description: 🔐SFTP 存储目录
        storage_sftp_username:
          type: string
          description: 🔐SFTP 用户名
        storage_type:
          type: string
          enum:
            - local
            - ftp
            - sftp
            - aliyun
            - upyun
            - qiniu
          description: 🔐存储类型
        storage_upyun_bucket:
          type: string
          description: 🔐又拍云 Bucket
        storage_upyun_operator:
          type: string
          description: 🔐又拍云操作员账号
        storage_upyun_password:
          type: string
          description: 🔐又拍云操作员密码
        storage_url:
          type: string
          description: 🔐本地文件访问链接
        theme:
          type: string
          description: 🔐主题名称

    User:
      type: object
      properties:
        user_id:
          type: integer
          description: 用户 ID
        username:
          type: string
          description: 用户名
        email:
          type: string
          description: 🔐邮箱
        avatar:
          type: object
          $ref: '#/components/schemas/UserAvatar'
        cover:
          type: object
          $ref: '#/components/schemas/UserCover'
        create_ip:
          type: string
          description: 🔐注册 IP
        create_location:
          type: string
          description: 🔐注册地
        last_login_time:
          type: integer
          description: 🔐最后登陆时间
        last_login_ip:
          type: string
          description: 🔐最后登陆 IP
        last_login_location:
          type: string
          description: 🔐最后登录地
        follower_count:
          type: integer
          description: 关注者数量
        followee_count:
          type: integer
          description: 关注的用户数量
        following_article_count:
          type: integer
          description: 关注的文章数量
        following_question_count:
          type: integer
          description: 关注的提问数量
        following_topic_count:
          type: integer
          description: 关注的话题数量
        article_count:
          type: integer
          description: 发表的文章数量
        question_count:
          type: integer
          description: 发表的提问数量
        answer_count:
          type: integer
          description: 发表的提问回答数量
        notification_unread:
          type: integer
          description: 🔐未读消息数量
        inbox_unread:
          type: integer
          description: 🔐未读私信数量
        headline:
          type: string
          description: 一句话介绍自己
        bio:
          type: string
          description: 个人简介
        blog:
          type: string
          description: 个人主页链接
        company:
          type: string
          description: 所属企业
        location:
          type: string
          description: 所在地区
        create_time:
          type: integer
          description: 注册时间
        update_time:
          type: integer
          description: 🔐更新时间
        disable_time:
          type: integer
          description: 🔐禁用时间
        relationship:
          type: object
          $ref: '#/components/schemas/UserRelationship'

    UserWithToken:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          required:
            - token
          properties:
            token:
              type: string
              description: Token

    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'

    UserAvatar:
      type: object
      properties:
        s:
          type: string
          description: 小头像地址
        m:
          type: string
          description: 中头像地址
        l:
          type: string
          description: 大头像地址

    UserCover:
      type: object
      properties:
        s:
          type: string
          description: 小型封面地址
        m:
          type: string
          description: 中型封面地址
        l:
          type: string
          description: 大型封面地址

    Question:
      type: object
      properties:
        question_id:
          type: integer
          description: 提问ID
        user_id:
          type: integer
          description: 用户ID
        title:
          type: string
          description: 提问标题
        content_markdown:
          type: string
          description: Markdown 格式的提问内容
        content_rendered:
          type: string
          description: HTML 格式的提问内容
        comment_count:
          type: integer
          description: 评论数量
        answer_count:
          type: integer
          description: 回答数量
        view_count:
          type: integer
          description: 浏览量
        follower_count:
          type: integer
          description: 关注者数量
        vote_count:
          type: integer
          description: 投票数（赞成票 - 反对票，可能为负数）
        last_answer_time:
          type: integer
          description: 最后回答时间
        create_time:
          type: integer
          description: 创建时间
        update_time:
          type: integer
          description: 更新时间（更新提问本身，或在提问下发表回答，都会更新该字段）
        delete_time:
          type: integer
          description: 🔐删除时间
        relationship:
          type: object
          $ref: '#/components/schemas/QuestionRelationship'

    Questions:
      type: array
      items:
        $ref: '#/components/schemas/Question'

    Answer:
      type: object
      properties:
        answer_id:
          type: integer
          description: 回答ID
        question_id:
          type: integer
          description: 提问ID
        user_id:
          type: integer
          description: 用户ID
        content_markdown:
          type: string
          description: markdown 格式的内容
        content_rendered:
          type: string
          description: html 格式的内容
        comment_count:
          type: integer
          description: 评论数量
        vote_count:
          type: integer
          description: 投票数（赞成票 - 反对票，可能为负数）
        create_time:
          type: integer
          description: 创建时间
        update_time:
          type: integer
          description: 🔐更新时间
        delete_time:
          type: integer
          description: 🔐删除时间
        relationship:
          type: object
          $ref: '#/components/schemas/AnswerRelationship'

    Answers:
      type: array
      items:
        $ref: '#/components/schemas/Answer'

    Topic:
      type: object
      properties:
        topic_id:
          type: integer
          description: 话题ID
        name:
          type: string
          description: 话题名称
        cover:
          type: object
          $ref: '#/components/schemas/TopicCover'
        description:
          type: string
          description: 话题描述
        article_count:
          type: integer
          description: 文章数量
        question_count:
          type: integer
          description: 提问数量
        follower_count:
          type: integer
          description: 关注者数量
        delete_time:
          type: integer
          description: 🔐删除时间
        relationship:
          type: object
          $ref: '#/components/schemas/TopicRelationship'

    Topics:
      type: array
      items:
        $ref: '#/components/schemas/Topic'

    TopicCover:
      type: object
      properties:
        s:
          type: string
          description: 小型封面地址
        m:
          type: string
          description: 中型封面地址
        l:
          type: string
          description: 大型封面地址

    Article:
      type: object
      properties:
        article_id:
          type: integer
          description: 文章ID
        user_id:
          type: integer
          description: 用户ID
        title:
          type: string
          description: 文章标题
        content_markdown:
          type: string
          description: Markdown 格式的文章内容
        content_rendered:
          type: string
          description: HTML 格式的文章内容
        comment_count:
          type: integer
          description: 评论数量
        view_count:
          type: integer
          description: 浏览量
        follower_count:
          type: integer
          description: 关注者数量
        vote_count:
          type: integer
          description: 投票数（赞成票 - 反对票，可能为负数）
        create_time:
          type: integer
          description: 创建时间
        update_time:
          type: integer
          description: 更新时间（用户可以更新自己的文章）
        delete_time:
          type: integer
          description: 🔐删除时间
        relationship:
          type: object
          $ref: '#/components/schemas/ArticleRelationship'

    Articles:
      type: array
      items:
        $ref: '#/components/schemas/Article'

    Comment:
      type: object
      properties:
        comment_id:
          type: integer
          description: 评论ID
        commentable_id:
          type: integer
          description: 评论目标的ID
        commentable_type:
          type: string
          description: 评论目标类型
          enum:
            - article
            - question
            - answer
        user_id:
          type: integer
          description: 用户ID
        content:
          type: string
          description: 评论内容
        vote_count:
          type: integer
          description: 投票数（赞成票 - 反对票，可能为负数）
        create_time:
          type: integer
          description: 发表时间
        update_time:
          type: integer
          description: 修改时间
        delete_time:
          type: integer
          description: 🔐删除时间
        relationship:
          type: object
          $ref: '#/components/schemas/CommentRelationship'

    Comments:
      type: array
      items:
        $ref: '#/components/schemas/Comment'

    VoteCount:
      type: object
      description: 投票数量
      properties:
        vote_count:
          type: integer
          description: 投票目标获得的总投票量（赞成票 - 反对票），结果可以为负数

    FollowerCount:
      type: object
      description: 关注者数量
      properties:
        follower_count:
          type: integer
          description: 关注者数量

    ReportGroup:
      type: object
      description: 举报集合
      properties:
        reportable_id:
          type: integer
          description: 举报目标的ID
        reportable_type:
          type: string
          description: 举报目标类型
          enum:
            - question
            - answer
            - article
            - comment
            - user
        reporter_count:
          type: integer
          description: 指定对象的被举报数量
        relationship:
          type: object
          $ref: '#/components/schemas/ReportGroupRelationship'

    ReportGroups:
      type: array
      items:
        $ref: '#/components/schemas/ReportGroup'

    Report:
      type: object
      description: 举报
      properties:
        report_id:
          type: integer
          description: 举报ID
        reportable_id:
          type: integer
          description: 举报目标的ID
        reportable_type:
          type: string
          description: 举报目标类型
          enum:
            - question
            - answer
            - article
            - comment
            - user
        user_id:
          type: integer
          description: 用户ID
        reason:
          type: string
          description: 举报理由
        create_time:
          type: string
          description: 举报时间
        relationship:
          type: object
          $ref: '#/components/schemas/ReportRelationship'

    Reports:
      type: array
      items:
        $ref: '#/components/schemas/Report'

    Image:
      type: object
      properties:
        hash:
          type: string
          description: 图片的 hash 值
        filename:
          type: string
          description: 图片原始文件名
        width:
          type: integer
          description: 原始图片宽度
        height:
          type: integer
          description: 原始图片高度
        create_time:
          type: integer
          description: 图片上传时间
        item_type:
          type: string
          description: 图片关联对象类型
        item_id:
          type: integer
          description: 图片管理对象ID
        user_id:
          type: integer
          description: 图片上传者ID
        urls:
          type: object
          properties:
            o:
              type: string
              description: 原图地址
            r:
              type: string
              description: 宽度固定，高度自适应的图片地址
            t:
              type: string
              description: 固定宽高的缩略图地址
        relationship:
          type: object
          $ref: '#/components/schemas/ImageRelationship'

    Images:
      type: array
      items:
        $ref: '#/components/schemas/Image'

    Email:
      type: object
      required:
        - email
        - subject
        - content
      properties:
        email:
          type: string
          description: 邮箱地址，多个地址间用“,”分隔，最多支持100个
        subject:
          type: string
          description: 邮件标题
        content:
          type: string
          description: 邮件内容

    UserRelationship:
      type: object
      properties:
        is_me:
          type: boolean
          description: 该用户是否是当前登录用户
        is_following:
          type: boolean
          description: 当前登录用户是否已关注该用户
        is_followed:
          type: boolean
          description: 该用户是否已关注当前登录用户

    QuestionRelationship:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserInRelationship'
        topics:
          $ref: '#/components/schemas/TopicsInRelationship'
        is_following:
          type: boolean
          description: 当前登录用户是否已关注该提问
        voting:
          type: string
          description: 当前登录用户的投票类型（up、down），未投过票则为空字符串

    AnswerRelationship:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserInRelationship'
        question:
          $ref: '#/components/schemas/QuestionInRelationship'
        voting:
          type: string
          description: 当前登录用户的投票类型（up、down），未投过票则为空字符串

    TopicRelationship:
      type: object
      properties:
        is_following:
          type: boolean
          description: 当前登录用户是否已关注该话题
        voting:
          type: string
          description: 当前登录用户的投票类型（up、down），未投过票则为空字符串

    ArticleRelationship:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserInRelationship'
        topics:
          $ref: '#/components/schemas/TopicsInRelationship'
        is_following:
          type: boolean
          description: 当前登录用户是否已关注该文章
        voting:
          type: string
          description: 当前登录用户的投票类型（up、down），未投过票则为空字符串

    CommentRelationship:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserInRelationship'
        voting:
          type: string
          description: 当前登录用户的投票类型（up、down），未投过票则为空字符串

    ReportGroupRelationship:
      type: object
      properties:
        question:
          $ref: '#/components/schemas/QuestionInRelationship'
        answer:
          $ref: '#/components/schemas/AnswerInRelationship'
        article:
          $ref: '#/components/schemas/ArticleInRelationship'
        comment:
          $ref: '#/components/schemas/CommentInRelationship'
        user:
          $ref: '#/components/schemas/UserInRelationship'

    ReportRelationship:
      type: object
      properties:
        reporter:
          $ref: '#/components/schemas/UserInRelationship'
        question:
          $ref: '#/components/schemas/QuestionInRelationship'
        answer:
          $ref: '#/components/schemas/AnswerInRelationship'
        article:
          $ref: '#/components/schemas/ArticleInRelationship'
        comment:
          $ref: '#/components/schemas/CommentInRelationship'
        user:
          $ref: '#/components/schemas/UserInRelationship'

    ImageRelationship:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserInRelationship'
        question:
          $ref: '#/components/schemas/QuestionInRelationship'
        article:
          $ref: '#/components/schemas/ArticleInRelationship'
        answer:
          $ref: '#/components/schemas/AnswerInRelationship'

    UserInRelationship:
      type: object
      properties:
        user_id:
          type: integer
          description: 用户ID
        username:
          type: string
          description: 用户名
        headline:
          type: string
          description: 一句话介绍
        avatar:
          type: object
          $ref: '#/components/schemas/UserAvatar'

    QuestionInRelationship:
      type: object
      properties:
        question_id:
          type: integer
          description: 提问ID
        title:
          type: string
          description: 提问标题
        create_time:
          type: integer
          description: 发布时间
        update_time:
          type: integer
          description: 更新时间

    AnswerInRelationship:
      type: object
      properties:
        answer_id:
          type: integer
          description: 回答ID
        content_summary:
          type: string
          description: 内容摘要
        create_time:
          type: integer
          description: 发布时间
        update_time:
          type: integer
          description: 更新时间

    ArticleInRelationship:
      type: object
      properties:
        article_id:
          type: integer
          description: 文章ID
        title:
          type: string
          description: 文章标题
        create_time:
          type: integer
          description: 发布时间
        update_time:
          type: integer
          description: 更新时间

    CommentInRelationship:
      type: object
      properties:
        comment_id:
          type: integer
          description: 评论ID
        content_summary:
          type: string
          description: 内容摘要
        create_time:
          type: integer
          description: 发布时间
        update_time:
          type: integer
          description: 更新时间

    TopicsInRelationship:
      type: array
      items:
        type: object
        properties:
          topic_id:
            type: integer
            description: 话题 ID
          name:
            type: string
            description: 话题名称
          cover:
            type: object
            $ref: '#/components/schemas/TopicCover'

  responses:

    Error:
      description: 默认的错误返回值
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Empty:
      description: 空数据，通过状态码区分成功还是失败
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                type: object

    Option:
      description: 全局设置参数列表
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/Option'

    User:
      description: 完整的用户信息
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/User'

    UserWithToken:
      description: 含 token 的用户信息
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/UserWithToken'

    Users:
      description: 用户列表
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/Users'
              pagination:
                $ref: '#/components/schemas/Pagination'

    UserAvatar:
      description: 新头像地址
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/UserAvatar'

    UserCover:
      description: 新封面地址
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/UserCover'

    Question:
      description: 提问详情
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/Question'

    Questions:
      description: 提问列表
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/Questions'
              pagination:
                $ref: '#/components/schemas/Pagination'

    Answer:
      description: 回答详情
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/Answer'

    Answers:
      description: 回答列表
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/Answers'
              pagination:
                $ref: '#/components/schemas/Pagination'

    Article:
      description: 文章详情
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/Article'

    Articles:
      description: 文章列表
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/Articles'
              pagination:
                $ref: '#/components/schemas/Pagination'

    Topic:
      description: 话题详情
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/Topic'

    Topics:
      description: 话题列表
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/Topics'
              pagination:
                $ref: '#/components/schemas/Pagination'

    Comment:
      description: 评论详情
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/Comment'

    Comments:
      description: 评论列表
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/Comments'
              pagination:
                $ref: '#/components/schemas/Pagination'

    Image:
      description: 图片详情
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/Image'

    Images:
      description: 图片列表
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/Images'
              pagination:
                $ref: '#/components/schemas/Pagination'

    Email:
      description: 邮件详情
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/Email'

    ReportGroups:
      description: 举报列表
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/ReportGroups'
              pagination:
                $ref: '#/components/schemas/Pagination'

    Report:
      description: 举报详情
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/Report'

    Reports:
      description: 举报详情列表
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/Reports'
              pagination:
                $ref: '#/components/schemas/Pagination'

    Captcha:
      description: 图形验证码信息
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                type: object
                properties:
                  captcha_token:
                    type: string
                    description: 图形验证码token
                  captcha_image:
                    type: string
                    description: base64格式的图形验证码图片


    FollowerCount:
      description: 关注者数量
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/FollowerCount'

    VoteCount:
      description: 投票数量
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              data:
                $ref: '#/components/schemas/VoteCount'


  parameters:

    token:
      name: token
      in: header
      description: token
      schema:
        type: string

    page:
      name: page
      in: query
      description: 当前页数
      schema:
        type: integer
        minimum: 1
        default: 1

    per_page:
      name: per_page
      in: query
      description: 每页条数（最大为 100）
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 15

    order:
      name: order
      in: query
      description: 排序方式。在字段前加 `-` 表示倒序排列。例如 `create_time` 表示按时间顺序排列，`-create_time` 则表示按时间倒序排列。
      schema:
        type: string

    user_id.path:
      name: user_id
      in: path
      description: 用户ID
      required: true
      schema:
        type: integer
        minimum: 1

    user_id.query:
      name: user_id
      in: query
      description: 用户ID
      schema:
        type: integer
        minimum: 1

    user_ids:
      name: user_id
      in: query
      description: 用“,”分隔的用户ID，最多可提供100个ID
      schema:
        type: array
        items:
          type: integer
          minimum: 1
        minItems: 1
        maxItems: 100
      style: form
      explode: false

    username.query:
      name: username
      in: query
      description: 用户名
      schema:
        type: string

    email.query:
      name: email
      in: query
      description: 邮箱
      schema:
        type: string

    article_id.path:
      name: article_id
      in: path
      description: 文章ID
      required: true
      schema:
        type: integer
        minimum: 1

    article_id.query:
      name: article_id
      in: query
      description: 文章ID
      schema:
        type: integer
        minimum: 1

    article_ids:
      name: article_id
      in: query
      description: 用“,”分隔的文章ID，最多可提供100个ID
      schema:
        type: array
        items:
          type: integer
          minimum: 1
        minItems: 1
        maxItems: 100
      style: form
      explode: false

    question_id.path:
      name: question_id
      in: path
      description: 提问ID
      required: true
      schema:
        type: integer
        minimum: 1

    question_id.query:
      name: question_id
      in: query
      description: 提问ID
      schema:
        type: integer
        minimum: 1

    question_ids:
      name: question_id
      in: query
      description: 用“,”分隔的提问ID，最多可提供100个ID
      schema:
        type: array
        items:
          type: integer
          minimum: 1
        minItems: 1
        maxItems: 100
      style: form
      explode: false

    topic_id.path:
      name: topic_id
      in: path
      description: 话题ID
      required: true
      schema:
        type: integer
        minimum: 1

    topic_id.query:
      name: topic_id
      in: query
      description: 话题ID
      schema:
        type: integer
        minimum: 1

    topic_ids:
      name: topic_id
      in: query
      description: 用“,”分隔的话题ID，最多可提供100个ID
      schema:
        type: array
        items:
          type: integer
          minimum: 1
        minItems: 1
        maxItems: 100
      style: form
      explode: false

    topic_name.query:
      name: name
      in: query
      description: 话题名称
      schema:
        type: string

    answer_id.path:
      name: answer_id
      in: path
      description: 回答ID
      required: true
      schema:
        type: integer
        minimum: 1

    answer_id.query:
      name: answer_id
      in: query
      description: 回答ID
      schema:
        type: integer
        minimum: 1

    answer_ids:
      name: answer_id
      in: query
      description: 用“,”分隔的回答ID，最多可提供100个ID
      schema:
        type: array
        items:
          type: integer
          minimum: 1
        minItems: 1
        maxItems: 100
      style: form
      explode: false

    comment_id.path:
      name: comment_id
      in: path
      description: 评论ID
      required: true
      schema:
        type: integer
        minimum: 1

    comment_id.query:
      name: comment_id
      in: query
      description: 评论ID
      schema:
        type: integer
        minimum: 1

    comment_ids:
      name: comment_id
      in: query
      description: 用“,”分隔的提问ID，最多可提供100个ID
      schema:
        type: array
        items:
          type: integer
          minimum: 1
        minItems: 1
        maxItems: 100
      style: form
      explode: false

    commentable_type.query:
      name: commentable_type
      in: query
      description: 评论目标类型
      schema:
        type: string
        enum:
          - article
          - question
          - answer

    commentable_id.query:
      name: commentable_id
      in: query
      description: 评论目标的ID
      schema:
        type: integer
        minimum: 1

    reportable_type.path:
      name: reportable_type
      in: path
      description: 目标类型
      required: true
      schema:
        type: string
        enum:
          - question
          - answer
          - article
          - comment
          - user

    reportable_type.query:
      name: reportable_type
      in: query
      description: 目标类型
      schema:
        type: string
        enum:
          - question
          - answer
          - article
          - comment
          - user

    reportable_id.path:
      name: reportable_id
      in: path
      description: 目标ID
      required: true
      schema:
        type: integer
        minimum: 1

    report_target:
      name: target
      in: query
      description: 类型和ID之间用“:”分隔，多个记录之间用“,”分隔，最多可提供100个。例如 question:12,comment:34
      schema:
        type: array
        items:
          type: string
        minItems: 1
        maxItems: 100
      style: form
      explode: false

    image_hash.path:
      name: hash
      in: path
      description: 图片hash
      required: true
      schema:
        type: string

    image_hash.query:
      name: hash
      in: query
      description: 图片hash
      schema:
        type: string

    image_hashs:
      name: hash
      in: query
      description: 用“,”分隔的图片hash，最多可提供 40 个 hash（IE 的 query 参数最长为 2k，为了不超过这个数值，限制最多可以提交 40 个 hash）
      schema:
        type: array
        items:
          type: string
        minItems: 1
        maxItems: 40
      style: form
      explode: false

    image_item_type.query:
      name: item_type
      in: query
      description: 图片关联对象的类型
      schema:
        type: string
        enum:
          - question
          - answer
          - article

    image_item_id.query:
      name: item_id
      in: query
      description: 图片关联对象的ID
      schema:
        type: string

    vote_type.query:
      name: type
      in: query
      description: |
        默认获取全部投票类型的用户
        `up` 表示仅获取投赞成票的用户
        `down` 表示仅获取投反对票的用户
      schema:
        type: string
        enum:
          - up
          - down

  requestBodies:

    Option:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Option'

    UserLogin:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - password
            properties:
              name:
                type: string
                description: 用户名或邮箱
              password:
                type: string
                description: 经过 hash1 加密后的密码
              device:
                type: string
                description: 设备信息
              captcha_token:
                type: string
                description: 图形验证码token。若上一次请求返回了 captcha_token， 则必须传该参数
              captcha_code:
                type: string
                description: 图形验证码的值。若上一次请求返回了 captcha_token，则必须传该参数

    UserRegister:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - email_code
              - username
              - password
            properties:
              email:
                type: string
                description: 邮箱
              email_code:
                type: string
                description: 邮箱验证码
              username:
                type: string
                description: 用户名
              password:
                type: string
                description: hash1 加密后的密码
              device:
                type: string
                description: 设备信息

    UserUpdate:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              headline:
                type: string
                description: 一句话介绍
              bio:
                type: string
                description: 个人简介
              blog:
                type: string
                description: 个人主页
              company:
                type: string
                description: 所属企业
              location:
                type: string
                description: 所属地区

    UserAvatar:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              avatar:
                type: string
                format: binary
                description: 用户头像

    UserCover:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              cover:
                type: string
                format: binary
                description: 用户封面

    UserSendEmail:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                description: 邮箱
              captcha_token:
                type: string
                description: 图形验证码token。若上一次请求返回了 captcha_token， 则必须传该参数
              captcha_code:
                type: string
                description: 图形验证码的值。若上一次请求返回了 captcha_token，则必须传该参数

    UserPasswordReset:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - email_code
              - password
            properties:
              email:
                type: string
                description: 邮箱
              email_code:
                type: string
                description: 邮箱验证码
              password:
                type: string
                description: hash1 加密后的密码

    Article:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: 标题
              topic_id:
                type: string
                description: 话题ID，多个ID用“,”分隔，最多支持 10 个ID
              content_markdown:
                type: string
                description: Markdown 格式的正文
              content_rendered:
                type: string
                description: HTML 格式的正文

    Question:
      $ref: '#/components/requestBodies/Article'

    Answer:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              content_markdown:
                type: string
                description: Markdown 格式的正文
              content_rendered:
                type: string
                description: HTML 格式的正文

    Topic:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              name:
                type: string
                description: 话题名称
              description:
                type: string
                description: 话题描述
              cover:
                type: string
                format: binary
                description: 封面图片

    Comment:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - content
            properties:
              content:
                type: string
                description: 评论内容

    Vote:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - type
            properties:
              type:
                type: string
                enum:
                  - up
                  - down
                description: 投票类型

    Report:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - reason
            properties:
              reason:
                type: string
                description: 举报理由

    Image:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              image:
                type: string
                format: binary
                description: 图片

    ImageFilename:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              filename:
                type: string
                description: 图片文件名

    Email:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Email'

  securitySchemes:

    ApiKeyAuth:
      type: apiKey
      name: token
      in: header


tags:

  - name: Option
    description: 系统设置

  - name: UserLogin
    description: 登录

  - name: UserRegister
    description: 注册

  - name: UserPasswordReset
    description: 重置密码

  - name: UserInfo
    description: 用户信息

  - name: UserAvatar
    description: 用户头像

  - name: UserCover
    description: 用户封面

  - name: UserFollow
    description: 用户关注

  - name: UserDisabled
    description: 禁用的用户

  - name: Topic
    description: 话题信息

  - name: TopicFollow
    description: 话题关注

  - name: TopicTrash
    description: 话题回收站

  - name: Question
    description: 提问信息

  - name: QuestionComment
    description: 提问评论

  - name: QuestionVote
    description: 提问投票

  - name: QuestionFollow
    description: 提问关注

  - name: QuestionTrash
    description: 提问回收站

  - name: Answer
    description: 回答信息

  - name: AnswerComment
    description: 回答评论

  - name: AnswerVote
    description: 回答投票

  - name: AnswerTrash
    description: 回答回收站

  - name: Article
    description: 文章信息

  - name: ArticleComment
    description: 文章评论

  - name: ArticleVote
    description: 文章投票

  - name: ArticleFollow
    description: 文章关注

  - name: ArticleTrash
    description: 文章回收站

  - name: Comment
    description: 评论

  - name: CommentVote
    description: 评论投票

  - name: CommentTrash
    description: 评论回收站

  - name: Report
    description: 举报

  - name: Inbox
    description: 私信

  - name: Notification
    description: 通知

  - name: Captcha
    description: 图形验证码

  - name: Email
    description: 邮件

  - name: Image
    description: 图片


externalDocs:
  description: 更多文档参见
  url: https://mdclub.org
